---
import ThemeToggle from '../components/ThemeToggle.astro';
import CookieBanner from '../components/CookieBanner.astro';
import '../styles/globals.css';
import '../styles/light-mode-override.css';
// import MagicNotifications from '../components/MagicNotifications.astro'; // Removed during cleanup

export interface Props {
  title?: string;
  description?: string;
  className?: string;
  logoUrl?: string;
  logoAlt?: string;
  ogImage?: string;
  ogImageAlt?: string;
}

// Obtener informaci√≥n del sitio para meta tags
let siteTitle = "Blixel";
let siteDescription = "Automatiza tu empresa con IA";

// COMENTADO: Este fetch puede causar problemas de recursi√≥n
// try {
//   const baseResponse = await fetch('https://blixel.es/wp-json/');
//   if (baseResponse.ok) {
//     const baseData = await baseResponse.json();
//     if (baseData.name) {
//       siteTitle = baseData.name;
//     }
//     if (baseData.description) {
//       siteDescription = baseData.description;
//     }
//   }
// } catch (error) {
//   // Usar valores por defecto si hay error
// }

const { 
  title = siteTitle, 
  description = siteDescription,
  className = '',
  logoUrl,
  logoAlt,
  ogImage,
  ogImageAlt = title
} = Astro.props;

// Construir t√≠tulo completo
const fullTitle = title === siteTitle ? siteTitle : `${title} | ${siteTitle}`;
---

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{fullTitle}</title>
  <meta name="description" content={description}>
  
  <!-- Favicon -->
  <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>üöÄ</text></svg>">
  
  <!-- Meta tags adicionales -->
  <meta name="robots" content="index, follow">
  <meta name="author" content="Blixel">
  
  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="website">
  <meta property="og:title" content={fullTitle}>
  <meta property="og:description" content={description}>
  <meta property="og:url" content="https://blixel.es">
  {ogImage && <meta property="og:image" content={ogImage} />}
  {ogImage && <meta property="og:image:alt" content={ogImageAlt} />}
  <meta property="og:site_name" content={siteTitle}>
  <meta property="og:locale" content="es_ES">
  
  <!-- Twitter -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content={fullTitle}>
  <meta name="twitter:description" content={description}>
  {ogImage && <meta name="twitter:image" content={ogImage} />}
  {ogImage && <meta name="twitter:image:alt" content={ogImageAlt} />}
  
  <!-- Preload fonts for better performance -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
</head>
<body class={className}>
  <!-- Bot√≥n de cambio de tema -->
  <ThemeToggle />
  
  <!-- Banner de cookies RGPD -->
  <CookieBanner />
  
  <!-- Bot√≥n de debug para part√≠culas (temporal) -->
  <button id="particles-debug" style="position: fixed; bottom: 20px; right: 20px; z-index: 9999; padding: 10px; background: #60a5fa; color: white; border: none; border-radius: 8px; cursor: pointer;">
    üéÜ Debug Part√≠culas
  </button>
  
  <!-- Canvas de part√≠culas modernas con tsParticles -->
  <div id="tsparticles"></div>
  
  <!-- Header removido para usar el de WordPress -->
  
  <!-- Contenido principal -->
  <main id="main-content">
    <slot />
  </main>
  
  <!-- Magic UI Notifications System -->
  <!-- MagicNotifications component removed during cleanup -->
  
  <!-- Sistema de part√≠culas modernas con tsParticles -->
  <script>
    // Funci√≥n para cargar tsParticles modernos y minimalistas
    async function loadTsParticles() {
      // Cargar tsParticles desde CDN
      if (!window.tsParticles) {
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/tsparticles-slim@2.12.0/tsparticles.slim.bundle.min.js';
        script.onload = initTsParticles;
        document.head.appendChild(script);
      } else {
        initTsParticles();
      }
    }

    // Configuraci√≥n minimalista y moderna de tsParticles
    function initTsParticles() {
      console.log('üéÜ Inicializando part√≠culas...');
      
      tsParticles.load('tsparticles', {
        background: {
          color: {
            value: 'transparent',
          },
        },
        fpsLimit: 120,
        interactivity: {
          events: {
            onClick: {
              enable: true,
              mode: 'push',
            },
            onHover: {
              enable: true,
              mode: 'grab',
            },
            resize: true,
          },
          modes: {
            push: {
              quantity: 4,
            },
            grab: {
              distance: 150,
              links: {
                opacity: 0.5,
              },
            },
          },
        },
        particles: {
          color: {
            value: ['#60a5fa', '#3b82f6', '#2563eb', '#93c5fd', '#1e40af'],
          },
          links: {
            color: '#60a5fa',
            distance: 150,
            enable: true,
            opacity: 0.4,
            width: 1.5,
          },
          collisions: {
            enable: false,
          },
          move: {
            direction: 'none',
            enable: true,
            outModes: {
              default: 'bounce',
            },
            random: false,
            speed: 1.2,
            straight: false,
          },
          number: {
            density: {
              enable: true,
              area: 700,
            },
            value: 70,
          },
          opacity: {
            value: 0.6,
            animation: {
              enable: true,
              speed: 1.5,
              minimumValue: 0.2,
              sync: false,
            },
          },
          shape: {
            type: 'circle',
          },
          size: {
            value: { min: 2, max: 5 },
            animation: {
              enable: true,
              speed: 2,
              minimumValue: 0.8,
              sync: false,
            },
          },
        },
        detectRetina: true,
      }).then(() => {
        console.log('‚úÖ Part√≠culas cargadas correctamente');
      }).catch((error) => {
        console.error('‚ùå Error cargando part√≠culas:', error);
        // Bot√≥n de debug para part√≠culas
      const debugBtn = document.getElementById('particles-debug');
      if (debugBtn) {
        debugBtn.addEventListener('click', () => {
          const container = window.tsParticles?.domItem(0);
          if (container) {
            console.log('üéÜ Estado de las part√≠culas:');
            console.log('Container:', container);
            console.log('Part√≠culas activas:', container.particles.count);
            console.log('Canvas:', document.querySelector('#tsparticles canvas'));
            console.log('Opciones:', container.options);
            
            // Intentar a√±adir m√°s part√≠culas
            container.particles.push(10);
            console.log('Se a√±adieron 10 part√≠culas nuevas');
          } else {
            console.error('No se encontr√≥ el contenedor de part√≠culas');
            // Intentar cargar de nuevo
            console.log('Intentando cargar part√≠culas de nuevo...');
            loadTsParticles();
          }
        });
      }
    });
    }

    // Funci√≥n para actualizar part√≠culas seg√∫n el tema
    function updateParticlesTheme() {
      if (window.tsParticles && window.tsParticles.domItem(0)) {
        const isDark = document.documentElement.classList.contains('dark');
        const container = window.tsParticles.domItem(0);
        
        // Actualizar colores de part√≠culas
        container.options.particles.color.value = isDark 
          ? ['#60a5fa', '#3b82f6', '#2563eb', '#93c5fd', '#1e40af']
          : ['#1e40af', '#2563eb', '#1d4ed8', '#3b82f6', '#60a5fa'];
        
        // Actualizar enlaces
        container.options.particles.links.color = isDark ? '#60a5fa' : '#2563eb';
        container.options.particles.links.opacity = isDark ? 0.4 : 0.6;
        
        // Actualizar opacidad - BALANCEADO
        container.options.particles.opacity.value = isDark ? 0.6 : 0.8;
        container.options.particles.opacity.animation.minimumValue = isDark ? 0.2 : 0.3;
        
        // Refrescar part√≠culas
        container.refresh();
        console.log(`üéÜ Part√≠culas balanceadas para modo ${isDark ? 'oscuro' : 'claro'}`);
      }
    }

    // Observar cambios en el tema
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          updateParticlesTheme();
        }
      });
    });

    // Cargar al inicio
    document.addEventListener('DOMContentLoaded', () => {
      console.log('üöÄ DOM cargado, iniciando part√≠culas...');
      loadTsParticles();
      
      // Observar cambios en la clase del HTML
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ['class']
      });
      
      // Verificar si las part√≠culas est√°n cargadas despu√©s de 3 segundos
      setTimeout(() => {
        const particlesCanvas = document.querySelector('#tsparticles canvas');
        if (particlesCanvas) {
          console.log('‚úÖ Canvas de part√≠culas encontrado:', particlesCanvas);
          console.log('Dimensiones:', particlesCanvas.width, 'x', particlesCanvas.height);
        } else {
          console.error('‚ùå No se encontr√≥ el canvas de part√≠culas');
        }
      }, 3000);
    });
  </script>
</body>
</html>

<style is:global>
  /* Reset b√°sico */
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  html {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    scroll-behavior: smooth;
    scroll-padding-top: 100px; /* Espacio extra para el header fijo */
  }

  body {
    line-height: 1.6;
    color: #e5e5e5;
    background-color: #000000;
    overflow-x: hidden;
    padding-top: 0; /* Sin header */
    transition: background-color 0.3s ease, color 0.3s ease;
    position: relative;
  }

  /* Modo claro */
  html:not(.dark) body {
    color: #1a1a1a;
    background-color: #ffffff;
  }

  /* Asegurar que el body tenga un fondo de gradiente */
  body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #000000 0%, #0a0a0a 50%, #000000 100%);
    z-index: -2;
    transition: background 0.5s ease;
  }

  html:not(.dark) body::before {
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 50%, #f1f5f9 100%);
  }

  /* Layout principal */
  #main-content {
    min-height: calc(100vh - 200px);
  }



  /* Utilidades globales */
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .text-center {
    text-align: center;
  }

  .mb-2 { margin-bottom: 1rem; }
  .mb-4 { margin-bottom: 2rem; }
  .mt-2 { margin-top: 1rem; }
  .mt-4 { margin-top: 2rem; }

  /* Canvas de part√≠culas modernas tsParticles */
  #tsparticles {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    pointer-events: none;
    opacity: 1;
  }

  /* A√±adir canvas de tsparticles al contenedor */
  #tsparticles canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
  }

  body {
    position: relative;
  }

  /* El contenido principal debe bloquear eventos del canvas */
  #main-content {
    pointer-events: auto;
    position: relative;
  }

  /* Asegurar fondo uniforme en todas las secciones */
  section {
    position: relative;
    background: transparent !important;
    border: none !important;
    box-shadow: none !important;
  }

  /* Main content transparente */
  #main-content {
    position: relative;
    background: transparent;
    z-index: 10;
  }




</style>
