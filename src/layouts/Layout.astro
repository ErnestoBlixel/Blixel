---
// import MagicNotifications from '../components/MagicNotifications.astro'; // Removed during cleanup
// import '../styles/globals.css'; // Comentado temporalmente

export interface Props {
  title?: string;
  description?: string;
  className?: string;
  logoUrl?: string;
  logoAlt?: string;
  ogImage?: string;
  ogImageAlt?: string;
}

// Obtener información del sitio para meta tags
let siteTitle = "Blixel";
let siteDescription = "Automatiza tu empresa con IA";

// COMENTADO: Este fetch puede causar problemas de recursión
// try {
//   const baseResponse = await fetch('https://blixel.es/wp-json/');
//   if (baseResponse.ok) {
//     const baseData = await baseResponse.json();
//     if (baseData.name) {
//       siteTitle = baseData.name;
//     }
//     if (baseData.description) {
//       siteDescription = baseData.description;
//     }
//   }
// } catch (error) {
//   // Usar valores por defecto si hay error
// }

const { 
  title = siteTitle, 
  description = siteDescription,
  className = '',
  logoUrl,
  logoAlt,
  ogImage,
  ogImageAlt = title
} = Astro.props;

// Construir título completo
const fullTitle = title === siteTitle ? siteTitle : `${title} | ${siteTitle}`;
---

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{fullTitle}</title>
  <meta name="description" content={description}>
  
  <!-- Favicon -->
  <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>🚀</text></svg>">
  
  <!-- Meta tags adicionales -->
  <meta name="robots" content="index, follow">
  <meta name="author" content="Blixel">
  
  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="website">
  <meta property="og:title" content={fullTitle}>
  <meta property="og:description" content={description}>
  <meta property="og:url" content="https://blixel.es">
  {ogImage && <meta property="og:image" content={ogImage} />}
  {ogImage && <meta property="og:image:alt" content={ogImageAlt} />}
  <meta property="og:site_name" content={siteTitle}>
  <meta property="og:locale" content="es_ES">
  
  <!-- Twitter -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content={fullTitle}>
  <meta name="twitter:description" content={description}>
  {ogImage && <meta name="twitter:image" content={ogImage} />}
  {ogImage && <meta name="twitter:image:alt" content={ogImageAlt} />}
  
  <!-- Preload fonts for better performance -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
</head>
<body class={className}>
  <!-- Canvas de partículas avanzado -->
  <canvas id="particles-canvas"></canvas>
  
  <!-- Header removido para usar el de WordPress -->
  
  <!-- Contenido principal -->
  <main id="main-content">
    <slot />
  </main>
  
  <!-- Magic UI Notifications System -->
  <!-- MagicNotifications component removed during cleanup -->
  
  <!-- Sistema de partículas personalizado -->
  <script>
    (function() {
      const canvas = document.getElementById('particles-canvas');
      const ctx = canvas.getContext('2d');
      let particles = [];
      let mouseX = 0;
      let mouseY = 0;
      let frame = 0;

      // Colores corporativos
      const colors = ['#02aa6d', '#60a5fa', '#a855f7', '#251863'];
      const glowColors = ['rgba(2, 170, 109, 0.8)', 'rgba(96, 165, 250, 0.8)', 'rgba(168, 85, 247, 0.8)', 'rgba(37, 24, 99, 0.8)'];

      // Ajustar canvas
      function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
      }
      resizeCanvas();
      window.addEventListener('resize', resizeCanvas);

      // Clase Partícula mejorada
      class Particle {
        constructor() {
          this.x = Math.random() * canvas.width;
          this.y = Math.random() * canvas.height;
          this.size = Math.random() * 5 + 2;
          this.speedX = (Math.random() - 0.5) * 2;
          this.speedY = (Math.random() - 0.5) * 2;
          this.colorIndex = Math.floor(Math.random() * colors.length);
          this.color = colors[this.colorIndex];
          this.glowColor = glowColors[this.colorIndex];
          this.angle = Math.random() * Math.PI * 2;
          this.spin = (Math.random() - 0.5) * 0.1;
          this.opacity = Math.random() * 0.5 + 0.5;
          this.pulseSpeed = Math.random() * 0.02 + 0.01;
          this.connections = [];
          this.shape = Math.random() > 0.5 ? 'hex' : 'circle';
        }

        update() {
          // Movimiento
          this.x += this.speedX;
          this.y += this.speedY;
          this.angle += this.spin;

          // Efecto de atracción al mouse
          const dx = mouseX - this.x;
          const dy = mouseY - this.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < 200) {
            const force = (200 - distance) / 200;
            this.x += dx * force * 0.02;
            this.y += dy * force * 0.02;
          }

          // Rebote en bordes
          if (this.x < 0 || this.x > canvas.width) this.speedX *= -1;
          if (this.y < 0 || this.y > canvas.height) this.speedY *= -1;

          // Pulso
          this.opacity = 0.5 + Math.sin(frame * this.pulseSpeed) * 0.3;

          // Límites
          this.x = Math.max(0, Math.min(canvas.width, this.x));
          this.y = Math.max(0, Math.min(canvas.height, this.y));
        }

        draw() {
          ctx.save();
          ctx.translate(this.x, this.y);
          ctx.rotate(this.angle);
          
          // Glow effect
          ctx.shadowColor = this.glowColor;
          ctx.shadowBlur = 20;
          ctx.globalAlpha = this.opacity;

          if (this.shape === 'hex') {
            // Hexágono
            ctx.beginPath();
            for (let i = 0; i < 6; i++) {
              const angle = (Math.PI / 3) * i;
              const x = this.size * Math.cos(angle);
              const y = this.size * Math.sin(angle);
              if (i === 0) ctx.moveTo(x, y);
              else ctx.lineTo(x, y);
            }
            ctx.closePath();
            ctx.fillStyle = this.color;
            ctx.fill();
            ctx.strokeStyle = this.glowColor;
            ctx.lineWidth = 1;
            ctx.stroke();
          } else {
            // Círculo con gradiente
            const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, this.size);
            gradient.addColorStop(0, this.color);
            gradient.addColorStop(1, this.glowColor);
            ctx.beginPath();
            ctx.arc(0, 0, this.size, 0, Math.PI * 2);
            ctx.fillStyle = gradient;
            ctx.fill();
          }
          
          ctx.restore();
        }
      }

      // Crear partículas
      function createParticles() {
        const particleCount = window.innerWidth < 768 ? 50 : 100;
        for (let i = 0; i < particleCount; i++) {
          particles.push(new Particle());
        }
      }
      createParticles();

      // Dibujar conexiones
      function drawConnections() {
        for (let i = 0; i < particles.length; i++) {
          for (let j = i + 1; j < particles.length; j++) {
            const dx = particles[i].x - particles[j].x;
            const dy = particles[i].y - particles[j].y;
            const distance = Math.sqrt(dx * dx + dy * dy);

            if (distance < 150) {
              ctx.save();
              ctx.globalAlpha = (1 - distance / 150) * 0.5;
              
              // Línea con gradiente
              const gradient = ctx.createLinearGradient(
                particles[i].x, particles[i].y,
                particles[j].x, particles[j].y
              );
              gradient.addColorStop(0, particles[i].color);
              gradient.addColorStop(1, particles[j].color);
              
              ctx.strokeStyle = gradient;
              ctx.lineWidth = 2;
              ctx.beginPath();
              ctx.moveTo(particles[i].x, particles[i].y);
              ctx.lineTo(particles[j].x, particles[j].y);
              ctx.stroke();
              ctx.restore();
            }
          }
        }
      }

      // Loop de animación
      function animate() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Fondo con gradiente sutil
        const bgGradient = ctx.createRadialGradient(
          canvas.width / 2, canvas.height / 2, 0,
          canvas.width / 2, canvas.height / 2, canvas.width
        );
        bgGradient.addColorStop(0, 'rgba(10, 10, 10, 0.1)');
        bgGradient.addColorStop(1, 'rgba(0, 0, 0, 0.1)');
        ctx.fillStyle = bgGradient;
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        // Actualizar y dibujar
        drawConnections();
        particles.forEach(particle => {
          particle.update();
          particle.draw();
        });

        frame++;
        requestAnimationFrame(animate);
      }

      // Mouse tracking
      document.addEventListener('mousemove', (e) => {
        mouseX = e.clientX;
        mouseY = e.clientY;
      });

      // Click effect
      canvas.addEventListener('click', (e) => {
        const clickX = e.clientX;
        const clickY = e.clientY;
        
        // Crear onda expansiva
        for (let i = 0; i < particles.length; i++) {
          const dx = particles[i].x - clickX;
          const dy = particles[i].y - clickY;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < 200) {
            const angle = Math.atan2(dy, dx);
            const force = (200 - distance) / 50;
            particles[i].speedX += Math.cos(angle) * force;
            particles[i].speedY += Math.sin(angle) * force;
          }
        }

        // Añadir nuevas partículas en el click
        for (let i = 0; i < 5; i++) {
          const newParticle = new Particle();
          newParticle.x = clickX + (Math.random() - 0.5) * 20;
          newParticle.y = clickY + (Math.random() - 0.5) * 20;
          newParticle.size = Math.random() * 8 + 4;
          particles.push(newParticle);
        }

        // Limitar partículas
        if (particles.length > 150) {
          particles = particles.slice(-150);
        }
      });

      // Iniciar animación
      animate();
    })();
  </script>
</body>
</html>

<style is:global>
  /* Reset básico */
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  html {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    scroll-behavior: smooth;
  }

  body {
    line-height: 1.6;
    color: #e5e5e5;
    background-color: #000000;
    overflow-x: hidden;
    padding-top: 0; /* Sin header */
  }

  /* Layout principal */
  #main-content {
    min-height: calc(100vh - 200px);
  }



  /* Utilidades globales */
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .text-center {
    text-align: center;
  }

  .mb-2 { margin-bottom: 1rem; }
  .mb-4 { margin-bottom: 2rem; }
  .mt-2 { margin-top: 1rem; }
  .mt-4 { margin-top: 2rem; }

  /* Canvas de partículas personalizado */
  #particles-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    background: linear-gradient(135deg, #000000 0%, #0a0a0a 50%, #000000 100%);
    pointer-events: auto; /* Permitir interacción */
  }

  body {
    position: relative;
  }

  /* El contenido principal debe bloquear eventos del canvas */
  #main-content {
    pointer-events: auto;
    position: relative;
  }

  /* Asegurar fondo uniforme en todas las secciones */
  section {
    position: relative;
    background: transparent !important;
    border: none !important;
    box-shadow: none !important;
  }

  /* Main content transparente */
  #main-content {
    position: relative;
    background: transparent;
    z-index: 1;
  }




</style>
