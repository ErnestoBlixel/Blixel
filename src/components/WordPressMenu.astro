---
// Configuración del WordPress
const WP_BASE_URL = 'https://cms.blixel.es';

// Función para obtener el menú REAL desde el servidor
async function getWordPressMenu() {
  try {
    console.log('Obteniendo menú de WordPress desde:', WP_BASE_URL);

    // Verificar si la API está disponible
    const baseCheck = await fetch(`${WP_BASE_URL}/wp-json/`);
    if (!baseCheck.ok) {
      console.error('WordPress REST API no disponible');
      return [];
    }

    // PRIMERO: Intentar con Navigation Blocks (WordPress 6.0+)
    console.log('Intentando obtener Navigation Blocks...');
    try {
      const navResponse = await fetch(`${WP_BASE_URL}/wp-json/wp/v2/navigation`);
      if (navResponse.ok) {
        const navigations = await navResponse.json();
        console.log('Navigation blocks encontrados:', navigations);
        
        if (navigations && navigations.length > 0) {
          const navigation = navigations[0];
          console.log('Usando navigation block:', navigation.title?.rendered || 'Sin título');
          const menuItems = parseNavigationContent(navigation.content?.rendered || '');
          if (menuItems.length > 0) {
            console.log('Menú procesado desde Navigation Block:', menuItems);
            return menuItems;
          }
        }
      } else {
        console.log('Navigation blocks no disponible:', navResponse.status);
      }
    } catch (e) {
      console.log('Error con Navigation blocks:', e.message);
    }

    // SEGUNDO: Intentar con menús tradicionales
    console.log('Intentando obtener menús tradicionales...');
    const menusResponse = await fetch(`${WP_BASE_URL}/wp-json/wp/v2/menus`);
    if (menusResponse.ok) {
      const menus = await menusResponse.json();
      console.log('Menús tradicionales encontrados:', menus);

      if (menus && menus.length > 0) {
        const menu = menus[0];
        console.log(`Usando menú tradicional: "${menu.name}" (ID: ${menu.id})`);

        const itemsResponse = await fetch(
          `${WP_BASE_URL}/wp-json/wp/v2/menu-items?menus=${menu.id}&per_page=100&orderby=menu_order&order=asc`
        );

        if (itemsResponse.ok) {
          const menuItems = await itemsResponse.json();
          console.log(`Items del menú obtenidos: ${menuItems.length}`);
          const processedItems = processMenuItems(menuItems);
          if (processedItems.length > 0) {
            return processedItems;
          }
        }
      }
    } else {
      console.log('Menús tradicionales no disponibles:', menusResponse.status);
    }

    // TERCERO: Intentar con wp-api-menus plugin
    console.log('Intentando con wp-api-menus plugin...');
    try {
      const pluginResponse = await fetch(`${WP_BASE_URL}/wp-json/wp-api-menus/v2/menus`);
      if (pluginResponse.ok) {
        const pluginMenus = await pluginResponse.json();
        console.log('Menús encontrados via plugin:', pluginMenus);
        const processedItems = processPluginMenus(pluginMenus);
        if (processedItems.length > 0) {
          return processedItems;
        }
      }
    } catch (e) {
      console.log('Plugin wp-api-menus no disponible:', e.message);
    }

    console.warn('No se encontró ningún menú válido');
    return [];

  } catch (error) {
    console.error('Error obteniendo menú de WordPress:', error);
    return [];
  }
}

// Parsear contenido de Navigation Blocks (WordPress 6.0+)
function parseNavigationContent(content) {
  console.log('Parseando Navigation Block content...');
  if (!content) {
    console.log('No hay contenido para parsear');
    return [];
  }

  const menuItems = [];
  
  // Regex mejorado para extraer enlaces de Navigation Blocks
  const linkRegex = /<li[^>]*class="[^"]*wp-block-navigation-item[^"]*"[^>]*>.*?<a[^>]+href=["']([^"']+)["'][^>]*>.*?<span[^>]*class="[^"]*wp-block-navigation-item__label[^"]*"[^>]*>([^<]+)<\/span>.*?<\/a>.*?<\/li>/gs;
  
  let match;
  let index = 0;
  
  while ((match = linkRegex.exec(content)) !== null) {
    const url = match[1].trim();
    const title = match[2].trim();
    
    if (url && title) {
      menuItems.push({
        id: `nav-block-${index}`,
        title: title,
        url: url,
        target: url.startsWith('http') && !url.includes('blixel.es') ? '_blank' : '_self',
        children: []
      });
      index++;
    }
  }
  
  // Fallback: regex más simple si el anterior no funciona
  if (menuItems.length === 0) {
    console.log('Intentando regex fallback...');
    const simpleLinkRegex = /<a[^>]+href=["']([^"']+)["'][^>]*>([^<]+)<\/a>/g;
    
    while ((match = simpleLinkRegex.exec(content)) !== null) {
      const url = match[1].trim();
      const title = match[2].trim();
      
      if (url && title && !title.includes('<') && title.length > 0) {
        menuItems.push({
          id: `nav-simple-${index}`,
          title: title,
          url: url,
          target: url.startsWith('http') && !url.includes('blixel.es') ? '_blank' : '_self',
          children: []
        });
        index++;
      }
    }
  }
  
  console.log('Items extraidos del Navigation Block:', menuItems);
  return menuItems;
}

// Procesar items del menú estándar
function processMenuItems(menuItems) {
  if (!menuItems || !Array.isArray(menuItems)) {
    console.warn('Items del menú no válidos');
    return [];
  }
  
  const processedItems = menuItems
    .filter(item => item.menu_item_parent === 0 || item.menu_item_parent === '0')
    .map(item => {
      const children = menuItems.filter(child => 
        child.menu_item_parent === item.id || child.menu_item_parent === String(item.id)
      ).map(child => ({
        id: child.id,
        title: child.title?.rendered || child.title,
        url: child.url,
        target: child.target || '_self'
      }));

      return {
        id: item.id,
        title: item.title?.rendered || item.title,
        url: item.url,
        target: item.target || '_self',
        children
      };
    });
  
  console.log('Menú procesado:', processedItems);
  return processedItems;
}

// Procesar menús del plugin wp-api-menus
function processPluginMenus(pluginMenus) {
  if (!Array.isArray(pluginMenus) || pluginMenus.length === 0) return [];
  
  const menu = pluginMenus[0];
  if (!menu.items) return [];
  
  return menu.items.map(item => ({
    id: item.ID,
    title: item.title,
    url: item.url,
    target: item.target || '_self',
    children: item.children ? item.children.map(child => ({
      id: child.ID,
      title: child.title,
      url: child.url,
      target: child.target || '_self'
    })) : []
  }));
}

// Obtener el menú (esto se ejecuta en el servidor durante la construcción)
const menuItems = await getWordPressMenu();
---

<!-- Componente del menú -->
<nav class="wp-menu" role="navigation" aria-label="Menú principal">
  {menuItems.length > 0 ? (
    <ul class="menu-list">
      {menuItems.map(item => (
        <li key={item.id} class="menu-item" data-has-children={item.children.length > 0}>
          <a 
            href={item.url} 
            target={item.target}
            class="menu-link"
            rel={item.target === '_blank' ? 'noopener noreferrer' : undefined}
          >
            {item.title}
          </a>
          
          {/* Submenú si tiene hijos */}
          {item.children.length > 0 && (
            <ul class="submenu">
              {item.children.map(child => (
                <li key={child.id} class="submenu-item">
                  <a 
                    href={child.url} 
                    target={child.target}
                    class="submenu-link"
                    rel={child.target === '_blank' ? 'noopener noreferrer' : undefined}
                  >
                    {child.title}
                  </a>
                </li>
              ))}
            </ul>
          )}
        </li>
      ))}
    </ul>
  ) : (
    <div class="menu-fallback">
      <a href="/" class="menu-link">Inicio</a>
      <a href="#contacto" class="menu-link">Contacto</a>
    </div>
  )}
</nav>

<style>
  .wp-menu {
    display: flex;
    align-items: center;
  }

  .menu-list {
    display: flex;
    align-items: center;
    gap: 2rem;
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .menu-item {
    position: relative;
  }

  .menu-link {
    color: #ffffff;
    text-decoration: none;
    font-weight: 500;
    font-size: 1rem;
    padding: 0.5rem 0;
    transition: all 0.3s ease;
    border-bottom: 2px solid transparent;
  }

  html:not(.dark) .menu-link {
    color: #111827;
  }

  .menu-link:hover {
    color: #60a5fa;
    border-bottom-color: #60a5fa;
  }

  /* Submenú */
  .submenu {
    position: absolute;
    top: 100%;
    left: 0;
    min-width: 200px;
    background: rgba(0, 0, 0, 0.95);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 0.5rem 0;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    z-index: 1000;
  }

  html:not(.dark) .submenu {
    background: rgba(255, 255, 255, 0.95);
    border-color: rgba(0, 0, 0, 0.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .menu-item:hover .submenu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .submenu-item {
    list-style: none;
  }

  .submenu-link {
    display: block;
    color: #e5e7eb;
    text-decoration: none;
    padding: 0.75rem 1.5rem;
    font-size: 0.9rem;
    transition: all 0.3s ease;
  }

  html:not(.dark) .submenu-link {
    color: #374151;
  }

  .submenu-link:hover {
    background: rgba(96, 165, 250, 0.1);
    color: #60a5fa;
  }

  /* Fallback menu */
  .menu-fallback {
    display: flex;
    gap: 2rem;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .menu-list {
      gap: 1rem;
    }

    .menu-link {
      font-size: 0.9rem;
    }

    .submenu {
      position: static;
      opacity: 1;
      visibility: visible;
      transform: none;
      background: transparent;
      border: none;
      padding: 0;
      min-width: auto;
    }

    .submenu-link {
      padding: 0.5rem 0;
    }
  }

  /* Indicador de submenú */
  .menu-item[data-has-children="true"] .menu-link::after {
    content: '▼';
    font-size: 0.7rem;
    margin-left: 0.5rem;
    opacity: 0.7;
    transition: transform 0.3s ease;
  }

  .menu-item[data-has-children="true"]:hover .menu-link::after {
    transform: rotate(180deg);
  }
</style>

<script>
  // Mejorar la accesibilidad del menú
  document.addEventListener('DOMContentLoaded', () => {
    const menuItems = document.querySelectorAll('.menu-item[data-has-children="true"]');
    
    menuItems.forEach(item => {
      const link = item.querySelector('.menu-link');
      const submenu = item.querySelector('.submenu');
      
      if (link && submenu) {
        // Keyboard navigation
        link.addEventListener('keydown', (e) => {
          if (e.key === 'ArrowDown' || e.key === 'Enter') {
            e.preventDefault();
            const firstSubmenuLink = submenu.querySelector('.submenu-link');
            if (firstSubmenuLink) {
              firstSubmenuLink.focus();
            }
          }
        });

        // Close submenu on Escape
        submenu.addEventListener('keydown', (e) => {
          if (e.key === 'Escape') {
            link.focus();
          }
        });
      }
    });
  });
</script>
