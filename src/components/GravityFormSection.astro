---
// Componente para mostrar formulario de Gravity Forms via GraphQL
const formId = 1; // ID del formulario en Gravity Forms

// Query GraphQL para obtener el formulario con todos los campos
const GQL_FORM = `
  query GetGravityForm {
    gfForm(id: ${formId}, idType: DATABASE_ID) {
      id
      databaseId
      title
      description
      submitButton {
        text
      }
      formFields {
        nodes {
          id
          type
          displayOnly
          ... on TextField {
            label
            isRequired
            placeholder
          }
          ... on NameField {
            label
            isRequired
          }
          ... on EmailField {
            label
            isRequired
            placeholder
          }
          ... on PhoneField {
            label
            isRequired
            placeholder
          }
          ... on WebsiteField {
            label
            isRequired
            placeholder
          }
          ... on TextAreaField {
            label
            isRequired
            placeholder
          }
          ... on NumberField {
            label
            isRequired
            placeholder
          }
          ... on SelectField {
            label
            isRequired
            placeholder
            choices {
              text
              value
            }
          }
          ... on CheckboxField {
            label
            isRequired
            choices {
              text
              value
            }
          }
          ... on RadioField {
            label
            isRequired
            choices {
              text
              value
            }
          }
          ... on ConsentField {
            label
            isRequired
            checkboxLabel
          }
          ... on HiddenField {
            label
            defaultValue
          }
        }
      }
    }
  }
`;

// Obtener datos del formulario
let formData = null;
let formError = null;

const graphqlUrl = import.meta.env.PUBLIC_WP_GRAPHQL_URL;

if (graphqlUrl) {
  try {
    console.log('Consultando formulario con ID:', formId);
    console.log('URL de GraphQL:', graphqlUrl);
    console.log('Query GraphQL:', GQL_FORM);
    
    const response = await fetch(graphqlUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ query: GQL_FORM })
    });

    if (response.ok) {
      const result = await response.json();
      console.log('Respuesta de GraphQL:', result);
      if (!result.errors && result.data?.gfForm) {
        formData = result.data.gfForm;
        console.log('Campos del formulario:', formData.formFields?.nodes);
      } else {
        formError = result.errors?.[0]?.message || 'Error al cargar el formulario';
        console.error('GraphQL Error:', result.errors);
      }
    }
  } catch (error) {
    formError = 'Error de conexión con el servidor';
    console.error('Fetch Error:', error);
  }
}

// Props del componente
export interface Props {
  title?: string;
  description?: string;
  showTrustBadges?: boolean;
}

const { 
  title = formData?.title || 'Contacta con nosotros',
  description = formData?.description || 'Completa el formulario y te responderemos en menos de 24 horas.',
  showTrustBadges = true
} = Astro.props;
---

<section id="contact-form" class="form-section">
  <div class="container">
    <div class="form-content">
      <div class="form-header">
        <h2 class="form-title">{title}</h2>
        {description && <p class="form-description">{description}</p>}
      </div>

      <div class="form-wrapper">
        {formError ? (
          <div class="error-message">
            <p>Lo sentimos, no se pudo cargar el formulario.</p>
            <p class="error-details">{formError}</p>
            <a href="mailto:info@blixel.es" class="fallback-link">
              Envíanos un email directamente
            </a>
          </div>
        ) : formData ? (
          <form 
            id="gform-{formData.databaseId}" 
            class="gravity-form"
            data-form-id={formData.databaseId}
          >
            <div class="form-fields">
              {formData.formFields?.nodes?.map((field) => {
                // Saltar campos de solo visualización
                if (field.displayOnly) return null;
                
                return (
                  <div class="form-field field-type-{field.type.toLowerCase()}" key={field.id}>
                    {field.label && (
                      <label for="field-{field.id}">
                        {field.label}
                        {field.isRequired && <span class="required">*</span>}
                      </label>
                    )}
                    
                    {/* Renderizar diferentes tipos de campos */}
                    {(field.type === 'TEXT' || field.type === 'PHONE' || field.type === 'NUMBER' || field.type === 'WEBSITE' || field.type === 'NAME') && (
                      <input
                        type={field.type === 'NUMBER' ? 'number' : field.type === 'PHONE' ? 'tel' : field.type === 'WEBSITE' ? 'url' : 'text'}
                        id="field-{field.id}"
                        name="input_{field.id}"
                        placeholder={field.placeholder || ''}
                        required={field.isRequired}
                        class="form-input"
                      />
                    )}
                    
                    {field.type === 'EMAIL' && (
                      <input
                        type="email"
                        id="field-{field.id}"
                        name="input_{field.id}"
                        placeholder={field.placeholder || ''}
                        required={field.isRequired}
                        class="form-input"
                      />
                    )}
                    
                    {field.type === 'TEXTAREA' && (
                      <textarea
                        id="field-{field.id}"
                        name="input_{field.id}"
                        placeholder={field.placeholder || ''}
                        required={field.isRequired}
                        rows="4"
                        class="form-textarea"
                      ></textarea>
                    )}
                    
                    {field.type === 'SELECT' && (
                      <select
                        id="field-{field.id}"
                        name="input_{field.id}"
                        required={field.isRequired}
                        class="form-select"
                      >
                        {field.placeholder && (
                          <option value="">{field.placeholder}</option>
                        )}
                        {field.choices?.map((choice) => (
                          <option value={choice.value}>{choice.text}</option>
                        ))}
                      </select>
                    )}
                    
                    {field.type === 'CHECKBOX' && (
                      <div class="checkbox-group">
                        {field.choices?.map((choice, index) => (
                          <label class="checkbox-label">
                            <input
                              type="checkbox"
                              name="input_{field.id}_{index + 1}"
                              value={choice.value}
                              class="form-checkbox"
                            />
                            <span>{choice.text}</span>
                          </label>
                        ))}
                      </div>
                    )}
                    
                    {field.type === 'RADIO' && (
                      <div class="radio-group">
                        {field.choices?.map((choice) => (
                          <label class="radio-label">
                            <input
                              type="radio"
                              name="input_{field.id}"
                              value={choice.value}
                              required={field.isRequired}
                              class="form-radio"
                            />
                            <span>{choice.text}</span>
                          </label>
                        ))}
                      </div>
                    )}
                    
                    {field.type === 'CONSENT' && (
                      <label class="consent-label">
                        <input
                          type="checkbox"
                          id="field-{field.id}"
                          name="input_{field.id}_1"
                          required={field.isRequired}
                          class="form-checkbox"
                        />
                        <span>{field.checkboxLabel || field.label}</span>
                      </label>
                    )}
                    
                    {field.type === 'HIDDEN' && (
                      <input
                        type="hidden"
                        id="field-{field.id}"
                        name="input_{field.id}"
                        value={field.defaultValue || ''}
                      />
                    )}
                  </div>
                );
              })}
            </div>
            
            <div class="form-footer">
              <button type="submit" class="submit-button">
                {formData.submitButton?.text || 'Enviar'}
              </button>
            </div>
            
            <div class="form-message" style="display: none;"></div>
          </form>
        ) : (
          <div class="loading-state">
            <div class="spinner"></div>
            <p>Cargando formulario...</p>
          </div>
        )}
      </div>

      {showTrustBadges && (
        <div class="trust-badges">
          <div class="trust-item">
            <div class="trust-icon">🔒</div>
            <span>Datos 100% seguros</span>
          </div>
          <div class="trust-item">
            <div class="trust-icon">⚡</div>
            <span>Respuesta en 24h</span>
          </div>
          <div class="trust-item">
            <div class="trust-icon">🎯</div>
            <span>Sin compromiso</span>
          </div>
        </div>
      )}
    </div>
  </div>
</section>

<style>
  .form-section {
    padding: 5rem 0;
    background: #0a0a0a;
    position: relative;
  }

  .container {
    max-width: 800px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .form-content {
    text-align: center;
  }

  .form-header {
    margin-bottom: 3rem;
  }

  .form-title {
    font-family: 'Inter Tight', sans-serif;
    font-size: clamp(2rem, 4vw, 3rem);
    font-weight: 700;
    color: #e5e5e5;
    margin-bottom: 1rem;
  }

  .form-description {
    font-size: 1.125rem;
    color: #a3a3a3;
    line-height: 1.6;
  }

  .form-wrapper {
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 16px;
    padding: 2.5rem;
    backdrop-filter: blur(8px);
    margin-bottom: 2rem;
  }

  .gravity-form {
    text-align: left;
  }

  .form-fields {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-field label {
    display: block;
    font-size: 0.875rem;
    font-weight: 500;
    color: #e5e5e5;
    margin-bottom: 0.5rem;
  }

  .required {
    color: #ef4444;
    margin-left: 0.25rem;
  }

  .field-description {
    font-size: 0.813rem;
    color: #737373;
    margin-bottom: 0.5rem;
  }

  .form-input,
  .form-textarea,
  .form-select {
    width: 100%;
    padding: 0.75rem 1rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    color: #e5e5e5;
    font-size: 1rem;
    transition: all 200ms ease;
  }

  .form-input:focus,
  .form-textarea:focus,
  .form-select:focus {
    outline: none;
    border-color: #60a5fa;
    background: rgba(255, 255, 255, 0.08);
  }

  .form-textarea {
    resize: vertical;
    min-height: 100px;
  }

  .checkbox-group,
  .radio-group {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .checkbox-label,
  .radio-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    color: #e5e5e5;
    font-size: 0.875rem;
  }
  
  .consent-label {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    cursor: pointer;
    color: #e5e5e5;
    font-size: 0.875rem;
    line-height: 1.4;
  }
  
  .consent-label input[type="checkbox"] {
    flex-shrink: 0;
    margin-top: 0.1rem;
  }
  
  .consent-label span {
    flex: 1;
  }

  .form-checkbox,
  .form-radio {
    width: 18px;
    height: 18px;
    cursor: pointer;
  }

  .form-footer {
    margin-top: 2rem;
  }

  .submit-button {
    width: 100%;
    padding: 1rem 2rem;
    background: linear-gradient(135deg, #60a5fa 0%, #a855f7 100%);
    color: white;
    font-weight: 600;
    font-size: 1.125rem;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: all 300ms ease;
  }

  .submit-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(96, 165, 250, 0.3);
  }

  .submit-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .form-message {
    margin-top: 1rem;
    padding: 1rem;
    border-radius: 8px;
    font-size: 0.875rem;
  }

  .form-message.success {
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid rgba(34, 197, 94, 0.2);
    color: #22c55e;
  }

  .form-message.error {
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid rgba(239, 68, 68, 0.2);
    color: #ef4444;
  }

  .error-message {
    text-align: center;
    padding: 2rem;
  }

  .error-message p {
    color: #ef4444;
    margin-bottom: 0.5rem;
  }

  .error-details {
    font-size: 0.875rem;
    color: #a3a3a3;
  }

  .fallback-link {
    display: inline-block;
    margin-top: 1rem;
    color: #60a5fa;
    text-decoration: none;
    font-weight: 500;
  }

  .fallback-link:hover {
    text-decoration: underline;
  }

  .loading-state {
    text-align: center;
    padding: 3rem;
  }

  .spinner {
    width: 40px;
    height: 40px;
    margin: 0 auto 1rem;
    border: 3px solid rgba(255, 255, 255, 0.1);
    border-top-color: #60a5fa;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .trust-badges {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-top: 2rem;
  }

  .trust-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #a3a3a3;
    font-size: 0.875rem;
    justify-content: center;
  }

  .trust-icon {
    width: 32px;
    height: 32px;
    background: rgba(96, 165, 250, 0.1);
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1rem;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .form-section {
      padding: 3rem 0;
    }

    .container {
      padding: 0 1rem;
    }

    .form-wrapper {
      padding: 1.5rem;
    }

    .trust-badges {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>

<script>
  // Manejar el envío del formulario
  document.addEventListener('DOMContentLoaded', function() {
    // Verificar si el formulario se cargó correctamente
    const formElement = document.querySelector('.gravity-form') as HTMLFormElement;
    if (formElement) {
      console.log('✅ Formulario Gravity Forms renderizado');
      const formFields = formElement.querySelectorAll('.form-field');
      console.log(`Número de campos en el formulario: ${formFields.length}`);
      
      // Listar tipos de campos
      formFields.forEach((field, index) => {
        const fieldType = field.className.match(/field-type-(\w+)/);
        if (fieldType) {
          console.log(`Campo ${index + 1}: ${fieldType[1]}`);
        }
      });
    }
    
    const form = document.querySelector('.gravity-form') as HTMLFormElement;
    
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const submitButton = form.querySelector('.submit-button') as HTMLButtonElement;
        const messageDiv = form.querySelector('.form-message') as HTMLDivElement;
        const formId = form.dataset.formId;
        
        // Deshabilitar botón
        submitButton.disabled = true;
        submitButton.textContent = 'Enviando...';
        
        // Recopilar datos del formulario
        const formData = new FormData(form);
        const fieldValues = [];
        
        // Obtener todos los campos del formulario
        const formFields = form.querySelectorAll('input, textarea, select');
        const processedFields = new Set();
        
        formFields.forEach(field => {
          const fieldName = field.name;
          if (fieldName && fieldName.startsWith('input_')) {
            const fieldId = fieldName.split('_')[1];
            
            // Evitar duplicados para campos múltiples
            if (!processedFields.has(fieldId)) {
              if (field.type === 'checkbox') {
                // Para checkboxes, recopilar todos los valores marcados
                const checkboxes = form.querySelectorAll(`input[name^="input_${fieldId}_"]:checked`);
                const values = Array.from(checkboxes).map(cb => cb.value);
                if (values.length > 0) {
                  fieldValues.push({
                    id: parseInt(fieldId),
                    value: values.join(', ')
                  });
                }
                processedFields.add(fieldId);
              } else if (field.type === 'radio') {
                // Para radio buttons, obtener el valor seleccionado
                const selectedRadio = form.querySelector(`input[name="${fieldName}"]:checked`);
                if (selectedRadio) {
                  fieldValues.push({
                    id: parseInt(fieldId),
                    value: selectedRadio.value
                  });
                }
                processedFields.add(fieldId);
              } else if (fieldName.includes('_1') && field.type === 'checkbox') {
                // Para campos de consentimiento (generalmente tienen _1 al final)
                const baseFieldId = fieldName.replace('input_', '').replace('_1', '');
                if (field.checked) {
                  fieldValues.push({
                    id: parseInt(baseFieldId),
                    value: '1'
                  });
                }
                processedFields.add(baseFieldId);
              } else {
                // Para otros campos, obtener el valor directamente
                if (field.value) {
                  fieldValues.push({
                    id: parseInt(fieldId),
                    value: field.value
                  });
                }
                processedFields.add(fieldId);
              }
            }
          }
        });
        
        try {
          // Enviar mediante GraphQL
          const graphqlUrl = import.meta.env.PUBLIC_WP_GRAPHQL_URL;
          console.log('Enviando formulario a GraphQL:', graphqlUrl);
          console.log('Valores a enviar:', fieldValues);
          
          const response = await fetch(graphqlUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              query: `
                mutation SubmitForm($input: SubmitGfFormInput!) {
                  submitGfForm(input: $input) {
                    entry {
                      id
                    }
                    errors {
                      message
                    }
                  }
                }
              `,
              variables: {
                input: {
                  id: parseInt(formId),
                  fieldValues: fieldValues
                }
              }
            })
          });
          
          const result = await response.json();
          console.log('Respuesta GraphQL:', result);
          
          if (result.data?.submitGfForm?.entry?.id) {
            // Éxito
            messageDiv.className = 'form-message success';
            messageDiv.style.display = 'block';
            messageDiv.innerHTML = '¡Gracias! Hemos recibido tu mensaje y te responderemos en menos de 24 horas.';
            form.reset();
          } else if (result.data?.submitGfForm?.errors) {
            // Error del formulario
            const errorMessage = result.data.submitGfForm.errors[0]?.message || 
              'Hubo un error al enviar el formulario.';
            messageDiv.className = 'form-message error';
            messageDiv.style.display = 'block';
            messageDiv.textContent = errorMessage;
          } else {
            // Error general
            messageDiv.className = 'form-message error';
            messageDiv.style.display = 'block';
            messageDiv.textContent = 'Error al procesar el formulario. Por favor, inténtalo más tarde.';
          }
        } catch (error) {
          // Error de red
          messageDiv.className = 'form-message error';
          messageDiv.style.display = 'block';
          messageDiv.textContent = 'Error de conexión. Por favor, inténtalo más tarde.';
        } finally {
          // Rehabilitar botón
          submitButton.disabled = false;
          submitButton.textContent = 'Enviar';
        }
      });
    }
  });
</script>
