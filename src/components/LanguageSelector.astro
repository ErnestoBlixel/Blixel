---
import { languages, getLangFromUrl, getAlternateUrls } from '../i18n/config';
import { useTranslations } from '../i18n/utils';

interface Props {
  currentUrl: URL;
  className?: string;
}

const { currentUrl, className = '' } = Astro.props;
const currentLang = getLangFromUrl(currentUrl);
const { t } = useTranslations(currentLang);
const alternateUrls = getAlternateUrls(currentUrl.pathname, currentLang);
---

<div class={`language-selector ${className}`}>
  <button id="lang-toggle" class="lang-toggle" aria-label={t('nav.language')}>
    <span class="current-lang">
      <span class="flag">{languages[currentLang].flag}</span>
      <span class="code">{languages[currentLang].code.toUpperCase()}</span>
      <svg class="chevron" width="12" height="12" viewBox="0 0 12 12" fill="none">
        <path d="M3 4.5L6 7.5L9 4.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
      </svg>
    </span>
  </button>
  
  <div id="lang-menu" class="lang-menu hidden">
    {Object.entries(languages).map(([langCode, langInfo]) => {
      const url = alternateUrls[langCode];
      const isActive = langCode === currentLang;
      
      return (
        <a 
          href={url}
          class={`lang-option ${isActive ? 'active' : ''}`}
          hreflang={langInfo.locale}
          aria-current={isActive ? 'page' : undefined}
        >
          <span class="flag">{langInfo.flag}</span>
          <span class="name">{langInfo.name}</span>
          {isActive && <span class="check">âœ“</span>}
        </a>
      );
    })}
  </div>
</div>

<style>
.language-selector {
  position: relative;
  display: inline-block;
}

.lang-toggle {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 0.75rem;
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 8px;
  color: #ffffff;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 0.9rem;
  min-width: 80px;
}

html:not(.dark) .lang-toggle {
  background: rgba(0, 0, 0, 0.05);
  border: 1px solid rgba(0, 0, 0, 0.15);
  color: #374151;
}

.lang-toggle:hover {
  background: rgba(255, 255, 255, 0.15);
  border-color: rgba(255, 255, 255, 0.3);
}

html:not(.dark) .lang-toggle:hover {
  background: rgba(0, 0, 0, 0.08);
  border-color: rgba(0, 0, 0, 0.25);
}

.current-lang {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  width: 100%;
  justify-content: space-between;
}

.flag {
  font-size: 1.1em;
}

.code {
  font-weight: 500;
  letter-spacing: 0.5px;
}

.chevron {
  transition: transform 0.3s ease;
  opacity: 0.7;
}

.lang-toggle.active .chevron {
  transform: rotate(180deg);
}

.lang-menu {
  position: absolute;
  top: calc(100% + 0.5rem);
  right: 0;
  background: rgba(0, 0, 0, 0.95);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  overflow: hidden;
  min-width: 160px;
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
  z-index: 1000;
  opacity: 1;
  transform: translateY(0);
  transition: all 0.3s ease;
}

html:not(.dark) .lang-menu {
  background: rgba(255, 255, 255, 0.98);
  border: 1px solid rgba(0, 0, 0, 0.1);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
}

.lang-menu.hidden {
  opacity: 0;
  transform: translateY(-10px);
  pointer-events: none;
}

.lang-option {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem 1rem;
  color: #e5e7eb;
  text-decoration: none;
  transition: all 0.3s ease;
  border-bottom: 1px solid rgba(255, 255, 255, 0.05);
}

html:not(.dark) .lang-option {
  color: #374151;
  border-bottom: 1px solid rgba(0, 0, 0, 0.05);
}

.lang-option:last-child {
  border-bottom: none;
}

.lang-option:hover {
  background: rgba(255, 255, 255, 0.1);
  color: #ffffff;
}

html:not(.dark) .lang-option:hover {
  background: rgba(0, 0, 0, 0.05);
  color: #111827;
}

.lang-option.active {
  background: rgba(96, 165, 250, 0.1);
  color: #60a5fa;
}

html:not(.dark) .lang-option.active {
  background: rgba(59, 130, 246, 0.1);
  color: #2563eb;
}

.lang-option .name {
  flex: 1;
  font-weight: 500;
}

.check {
  color: #22c55e;
  font-weight: bold;
}

/* Responsive */
@media (max-width: 768px) {
  .lang-menu {
    right: auto;
    left: 0;
    min-width: 140px;
  }
  
  .lang-toggle {
    min-width: 70px;
    padding: 0.5rem;
  }
  
  .code {
    display: none;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const toggle = document.getElementById('lang-toggle');
  const menu = document.getElementById('lang-menu');
  
  if (!toggle || !menu) return;
  
  // Toggle del menu
  toggle.addEventListener('click', (e) => {
    e.stopPropagation();
    menu.classList.toggle('hidden');
    toggle.classList.toggle('active');
  });
  
  // Cerrar al hacer clic fuera
  document.addEventListener('click', (e) => {
    if (!toggle.contains(e.target) && !menu.contains(e.target)) {
      menu.classList.add('hidden');
      toggle.classList.remove('active');
    }
  });
  
  // Cerrar con Escape
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      menu.classList.add('hidden');
      toggle.classList.remove('active');
    }
  });
});
</script>
