---\nimport { languages, getLangFromUrl, getAlternateUrls, type SupportedLanguage } from '../i18n/config';\nimport { useTranslations } from '../i18n/utils';\n\ninterface Props {\n  currentUrl: URL;\n  className?: string;\n}\n\nconst { currentUrl, className = '' } = Astro.props;\nconst currentLang = getLangFromUrl(currentUrl);\nconst { t } = useTranslations(currentLang);\nconst alternateUrls = getAlternateUrls(currentUrl.pathname, currentLang);\n---\n\n<div class={`language-selector ${className}`}>\n  <button id=\"lang-toggle\" class=\"lang-toggle\" aria-label={t('nav.language')}>\n    <span class=\"current-lang\">\n      <span class=\"flag\">{languages[currentLang].flag}</span>\n      <span class=\"code\">{languages[currentLang].code.toUpperCase()}</span>\n      <svg class=\"chevron\" width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\">\n        <path d=\"M3 4.5L6 7.5L9 4.5\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n      </svg>\n    </span>\n  </button>\n  \n  <div id=\"lang-menu\" class=\"lang-menu hidden\">\n    {Object.entries(languages).map(([langCode, langInfo]) => {\n      const lang = langCode as SupportedLanguage;\n      const url = alternateUrls[lang];\n      const isActive = lang === currentLang;\n      \n      return (\n        <a \n          href={url}\n          class={`lang-option ${isActive ? 'active' : ''}`}\n          hreflang={langInfo.locale}\n          aria-current={isActive ? 'page' : undefined}\n        >\n          <span class=\"flag\">{langInfo.flag}</span>\n          <span class=\"name\">{langInfo.name}</span>\n          {isActive && <span class=\"check\">✓</span>}\n        </a>\n      );\n    })}\n  </div>\n</div>\n\n<style>\n  .language-selector {\n    position: relative;\n    display: inline-block;\n  }\n\n  .lang-toggle {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    padding: 0.5rem 0.75rem;\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 8px;\n    color: #ffffff;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    font-size: 0.9rem;\n    min-width: 80px;\n  }\n\n  html:not(.dark) .lang-toggle {\n    background: rgba(0, 0, 0, 0.05);\n    border: 1px solid rgba(0, 0, 0, 0.15);\n    color: #374151;\n  }\n\n  .lang-toggle:hover {\n    background: rgba(255, 255, 255, 0.15);\n    border-color: rgba(255, 255, 255, 0.3);\n  }\n\n  html:not(.dark) .lang-toggle:hover {\n    background: rgba(0, 0, 0, 0.08);\n    border-color: rgba(0, 0, 0, 0.25);\n  }\n\n  .current-lang {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: space-between;\n  }\n\n  .flag {\n    font-size: 1.1em;\n  }\n\n  .code {\n    font-weight: 500;\n    letter-spacing: 0.5px;\n  }\n\n  .chevron {\n    transition: transform 0.3s ease;\n    opacity: 0.7;\n  }\n\n  .lang-toggle.active .chevron {\n    transform: rotate(180deg);\n  }\n\n  .lang-menu {\n    position: absolute;\n    top: calc(100% + 0.5rem);\n    right: 0;\n    background: rgba(0, 0, 0, 0.95);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 12px;\n    overflow: hidden;\n    min-width: 160px;\n    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);\n    z-index: 1000;\n    opacity: 1;\n    transform: translateY(0);\n    transition: all 0.3s ease;\n  }\n\n  html:not(.dark) .lang-menu {\n    background: rgba(255, 255, 255, 0.98);\n    border: 1px solid rgba(0, 0, 0, 0.1);\n    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);\n  }\n\n  .lang-menu.hidden {\n    opacity: 0;\n    transform: translateY(-10px);\n    pointer-events: none;\n  }\n\n  .lang-option {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n    padding: 0.75rem 1rem;\n    color: #e5e7eb;\n    text-decoration: none;\n    transition: all 0.3s ease;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.05);\n  }\n\n  html:not(.dark) .lang-option {\n    color: #374151;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  }\n\n  .lang-option:last-child {\n    border-bottom: none;\n  }\n\n  .lang-option:hover {\n    background: rgba(255, 255, 255, 0.1);\n    color: #ffffff;\n  }\n\n  html:not(.dark) .lang-option:hover {\n    background: rgba(0, 0, 0, 0.05);\n    color: #111827;\n  }\n\n  .lang-option.active {\n    background: rgba(96, 165, 250, 0.1);\n    color: #60a5fa;\n  }\n\n  html:not(.dark) .lang-option.active {\n    background: rgba(59, 130, 246, 0.1);\n    color: #2563eb;\n  }\n\n  .lang-option .name {\n    flex: 1;\n    font-weight: 500;\n  }\n\n  .check {\n    color: #22c55e;\n    font-weight: bold;\n  }\n\n  /* Responsive */\n  @media (max-width: 768px) {\n    .lang-menu {\n      right: auto;\n      left: 0;\n      min-width: 140px;\n    }\n    \n    .lang-toggle {\n      min-width: 70px;\n      padding: 0.5rem;\n    }\n    \n    .code {\n      display: none;\n    }\n  }\n</style>\n\n<script>\n  document.addEventListener('DOMContentLoaded', () => {\n    const toggle = document.getElementById('lang-toggle');\n    const menu = document.getElementById('lang-menu');\n    \n    if (!toggle || !menu) return;\n    \n    // Toggle del menú\n    toggle.addEventListener('click', (e) => {\n      e.stopPropagation();\n      menu.classList.toggle('hidden');\n      toggle.classList.toggle('active');\n    });\n    \n    // Cerrar al hacer clic fuera\n    document.addEventListener('click', (e) => {\n      if (!toggle.contains(e.target as Node) && !menu.contains(e.target as Node)) {\n        menu.classList.add('hidden');\n        toggle.classList.remove('active');\n      }\n    });\n    \n    // Cerrar con Escape\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape') {\n        menu.classList.add('hidden');\n        toggle.classList.remove('active');\n      }\n    });\n  });\n</script>\n