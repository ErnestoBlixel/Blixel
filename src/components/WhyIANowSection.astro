---
// Sección: Por qué implementar IA ahora
---

<section id="why-ai-now" class="why-ia-section">
  <!-- Canvas de partículas flotantes -->
  <canvas id="why-particles-canvas" class="particles-canvas"></canvas>
  
  <!-- Fondo con gradiente -->
  <div class="why__background">
    <div class="gradient-orb gradient-orb--1"></div>
    <div class="gradient-orb gradient-orb--2"></div>
  </div>

  <div class="container">
    <div class="why-content-wrapper">
      <!-- Lado izquierdo: Título y descripción -->
      <div class="why-text-content">
        <h2 class="why-title">
          El momento es <span class="gradient-text">AHORA</span>
        </h2>
        
        <p class="why-description">
          La Inteligencia Artificial no es el futuro. Es el presente que está transformando empresas cada día. Mientras lees esto, tu competencia ya está automatizando procesos, mejorando su eficiencia y capturando más mercado.
        </p>
        
        <p class="why-subdescription">
          Cada día sin IA es dinero perdido en tareas automatizables, talento desperdiciado en procesos obsoletos y terreno cedido a competidores más ágiles. La pregunta no es si implementar IA, sino cuándo. Y la respuesta es clara: el momento es ahora.
        </p>
      </div>

      <!-- Lado derecho: Grid 2x2 de estadísticas -->
      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-number">73%</div>
          <div class="stat-description">
            de empresas con IA reportan +25% en productividad
          </div>
        </div>

        <div class="stat-card">
          <div class="stat-number">50%</div>
          <div class="stat-description">
            de trabajos administrativos desaparecerán en 2 años
          </div>
        </div>

        <div class="stat-card">
          <div class="stat-number">3x</div>
          <div class="stat-description">
            más rápido avanzan las empresas con IA
          </div>
        </div>

        <div class="stat-card">
          <div class="stat-number">2026</div>
          <div class="stat-description">
            empresas sin IA no sobrevivirán más allá
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .why-ia-section {
    position: relative;
    background: #000000;
    padding: 0 0 6rem;
    margin-top: -150px;
    padding-top: 150px;
    overflow: hidden;
  }

  /* Canvas de partículas */
  .particles-canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    opacity: 0.4;
  }

  /* Fondo con gradientes */
  .why__background {
    position: absolute;
    inset: 0;
    pointer-events: none;
  }

  .gradient-orb {
    position: absolute;
    border-radius: 50%;
    filter: blur(120px);
    opacity: 0.25;
    will-change: transform;
  }

  .gradient-orb--1 {
    width: 600px;
    height: 600px;
    background: radial-gradient(circle, #60a5fa 0%, transparent 70%);
    top: -200px;
    right: -200px;
    animation: float-slow 10s ease-in-out infinite;
  }

  .gradient-orb--2 {
    width: 500px;
    height: 500px;
    background: radial-gradient(circle, #a855f7 0%, transparent 70%);
    bottom: -150px;
    left: -150px;
    animation: float-slow 12s ease-in-out infinite reverse;
  }

  @keyframes float-slow {
    0%, 100% { transform: translate(0, 0) scale(1); }
    33% { transform: translate(30px, -30px) scale(1.05); }
    66% { transform: translate(-30px, 30px) scale(0.95); }
  }

  .container {
    position: relative;
    z-index: 10;
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .why-content-wrapper {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 6rem;
    align-items: center;
    min-height: 500px;
  }

  /* Contenido de texto (lado izquierdo) */
  .why-text-content {
    max-width: 600px;
  }

  .why-title {
    font-family: 'Inter', -apple-system, sans-serif;
    font-size: clamp(3rem, 5vw, 4rem);
    font-weight: 800;
    line-height: 1.1;
    color: #ffffff;
    margin-bottom: 2rem;
    letter-spacing: -0.02em;
  }

  .gradient-text {
    background: linear-gradient(135deg, #60a5fa 0%, #a855f7 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .why-description {
    font-size: 1.25rem;
    color: #e5e5e5;
    line-height: 1.6;
    margin-bottom: 1.5rem;
    font-weight: 400;
  }

  .why-subdescription {
    font-size: 1.125rem;
    color: #9ca3af;
    line-height: 1.6;
    font-weight: 400;
  }

  /* Stats Grid (lado derecho) */
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: repeat(2, 1fr);
    gap: 2rem;
    height: 100%;
  }

  .stat-card {
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.05);
    border-radius: 20px;
    padding: 2.5rem 2rem;
    backdrop-filter: blur(10px);
    transition: all 400ms cubic-bezier(0.22, 0.61, 0.36, 1);
    position: relative;
    overflow: hidden;
    opacity: 0;
    transform: translateY(20px);
    animation: card-reveal 600ms ease forwards;
    display: flex;
    flex-direction: column;
    justify-content: center;
    text-align: center;
  }

  .stat-card:nth-child(1) { animation-delay: 100ms; }
  .stat-card:nth-child(2) { animation-delay: 200ms; }
  .stat-card:nth-child(3) { animation-delay: 300ms; }
  .stat-card:nth-child(4) { animation-delay: 400ms; }

  .stat-card::before {
    content: '';
    position: absolute;
    inset: 0;
    background: radial-gradient(circle at center, rgba(96, 165, 250, 0.05) 0%, transparent 70%);
    opacity: 0;
    transition: opacity 400ms ease;
  }

  .stat-card:hover {
    transform: translateY(-5px);
    border-color: rgba(96, 165, 250, 0.2);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
  }

  .stat-card:hover::before {
    opacity: 1;
  }

  .stat-number {
    font-family: 'Inter Tight', sans-serif;
    font-size: 3rem;
    font-weight: 800;
    background: linear-gradient(135deg, #60a5fa 0%, #a855f7 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 0.75rem;
    line-height: 1;
  }

  .stat-description {
    color: #e5e5e5;
    font-size: 0.95rem;
    line-height: 1.4;
  }

  @keyframes card-reveal {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .why-content-wrapper {
      gap: 4rem;
    }

    .stats-grid {
      gap: 1.5rem;
    }

    .stat-card {
      padding: 2rem 1.5rem;
    }

    .stat-number {
      font-size: 2.5rem;
    }
  }

  @media (max-width: 768px) {
    .why-ia-section {
      padding: 0 0 4rem;
      margin-top: -100px;
      padding-top: 100px;
    }

    .container {
      padding: 0 1rem;
    }

    .why-content-wrapper {
      grid-template-columns: 1fr;
      gap: 3rem;
    }

    .why-text-content {
      text-align: center;
      max-width: 100%;
    }

    .why-title {
      font-size: 2.5rem;
    }

    .why-description {
      font-size: 1.125rem;
    }

    .why-subdescription {
      font-size: 1rem;
    }

    .stats-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
      max-width: 400px;
      margin: 0 auto;
    }

    .stat-card {
      padding: 2rem;
    }

    .stat-number {
      font-size: 2.5rem;
    }

    .gradient-orb--1,
    .gradient-orb--2 {
      width: 300px;
      height: 300px;
    }
  }

  @media (max-width: 480px) {
    .why-ia-section {
      margin-top: -80px;
      padding-top: 80px;
    }

    .why-title {
      font-size: 2rem;
    }

    .why-description {
      font-size: 1rem;
    }

    .why-subdescription {
      font-size: 0.9rem;
    }

    .stat-card {
      padding: 1.5rem;
    }

    .stat-number {
      font-size: 2rem;
    }

    .stat-description {
      font-size: 0.85rem;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Partículas de fondo (similar a Hero)
  const canvas = document.getElementById('why-particles-canvas');
  if (canvas) {
    const ctx = canvas.getContext('2d');
    let particles = [];
    
    function resizeCanvas() {
      const section = canvas.closest('.why-ia-section');
      canvas.width = section.offsetWidth;
      canvas.height = section.offsetHeight;
    }
    
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    
    class Particle {
      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.vx = (Math.random() - 0.5) * 0.3;
        this.vy = (Math.random() - 0.5) * 0.3;
        this.size = Math.random() * 2 + 1;
        this.opacity = Math.random() * 0.3 + 0.1;
        this.color = Math.random() > 0.5 ? '#60a5fa' : '#a855f7';
      }
      
      update() {
        this.x += this.vx;
        this.y += this.vy;
        
        if (this.x < 0 || this.x > canvas.width) this.vx *= -1;
        if (this.y < 0 || this.y > canvas.height) this.vy *= -1;
        
        this.x = Math.max(0, Math.min(canvas.width, this.x));
        this.y = Math.max(0, Math.min(canvas.height, this.y));
      }
      
      draw() {
        ctx.save();
        ctx.globalAlpha = this.opacity;
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fill();
        ctx.restore();
      }
    }
    
    // Crear menos partículas para no saturar
    for (let i = 0; i < 20; i++) {
      particles.push(new Particle());
    }
    
    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      particles.forEach(particle => {
        particle.update();
        particle.draw();
      });
      
      requestAnimationFrame(animate);
    }
    
    animate();
  }

  // Intersection Observer para animaciones
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        // Animar números si es una stat-card
        if (entry.target.classList.contains('stat-card')) {
          const numberElement = entry.target.querySelector('.stat-number');
          if (numberElement) {
            animateNumber(numberElement);
          }
        }
      }
    });
  }, observerOptions);

  // Observar las tarjetas
  const statCards = document.querySelectorAll('.stat-card');
  statCards.forEach(card => observer.observe(card));

  // Función para animar números
  function animateNumber(element) {
    const finalText = element.textContent;
    const hasPercentage = finalText.includes('%');
    const hasX = finalText.includes('x');
    const isYear = finalText.match(/^\d{4}$/);
    
    if (isYear) {
      // No animar años, mostrar directamente
      return;
    }
    
    let finalNumber;
    if (hasPercentage) {
      finalNumber = parseInt(finalText.replace('%', ''));
    } else if (hasX) {
      finalNumber = parseInt(finalText.replace('x', ''));
    } else {
      finalNumber = parseInt(finalText);
    }

    let currentNumber = 0;
    const increment = finalNumber / 50;
    const timer = setInterval(() => {
      currentNumber += increment;
      if (currentNumber >= finalNumber) {
        currentNumber = finalNumber;
        clearInterval(timer);
      }
      
      let displayText = Math.floor(currentNumber).toString();
      if (hasPercentage) displayText += '%';
      if (hasX) displayText += 'x';
      
      element.textContent = displayText;
    }, 30);
  }

  // Efecto parallax suave para los gradient orbs
  const orbs = document.querySelectorAll('.gradient-orb');
  let mouseX = 0;
  let mouseY = 0;

  document.addEventListener('mousemove', (e) => {
    mouseX = e.clientX / window.innerWidth - 0.5;
    mouseY = e.clientY / window.innerHeight - 0.5;
  });

  function updateOrbPositions() {
    orbs.forEach((orb, index) => {
      const speed = (index + 1) * 0.02;
      const x = mouseX * speed * 50;
      const y = mouseY * speed * 50;
      orb.style.transform = `translate(${x}px, ${y}px)`;
    });
    requestAnimationFrame(updateOrbPositions);
  }

  if (window.innerWidth > 768) {
    updateOrbPositions();
  }
});
</script>
