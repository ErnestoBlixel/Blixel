---
export interface Props {
  pageSlug?: string;
  customTitle?: string;
  customDescription?: string;
}

const {
  pageSlug = 'inicio',
  customTitle,
  customDescription
} = Astro.props;

// Query ampliado para obtener tambiÃ©n la imagen destacada
const GQL = `
  query GetPageSEOData($slug: ID!) {
    page(id: $slug, idType: URI) {
      title
      content
      seo {
        title
        metaDesc
        opengraphTitle
        opengraphDescription
      }
      featuredImage {
        node {
          sourceUrl
          altText
          mediaDetails {
            width
            height
          }
        }
      }
    }
  }
`;

let pageTitle = customTitle || 'Blixel AI';
let pageDescription = customDescription || 'AutomatizaciÃ³n Inteligente para tu Empresa';
let featuredImageUrl = null;
let featuredImageAlt = '';
let debugInfo = { error: null, found: false, hasData: false, hasImage: false };

// Solo ejecutar GraphQL si estamos en un entorno que lo permita
if (typeof import.meta.env.PUBLIC_WP_GRAPHQL_URL !== 'undefined' && import.meta.env.PUBLIC_WP_GRAPHQL_URL) {
  try {
    const graphqlUrl = import.meta.env.PUBLIC_WP_GRAPHQL_URL;
    
    const res = await fetch(graphqlUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        query: GQL,
        variables: { slug: pageSlug }
      })
    });

    if (res.ok) {
      const result = await res.json();
      const page = result.data?.page;
      
      if (page) {
        debugInfo.found = true;
        debugInfo.hasData = !!(page.seo?.title || page.seo?.metaDesc);
        
        // Obtener imagen destacada
        if (page.featuredImage?.node) {
          featuredImageUrl = page.featuredImage.node.sourceUrl;
          featuredImageAlt = page.featuredImage.node.altText || pageTitle;
          debugInfo.hasImage = true;
        }
        
        // Prioridad: SEO title > page title > custom title
        const newTitle = customTitle || 
                        page.seo?.title || 
                        page.seo?.opengraphTitle || 
                        page.title || 
                        'Blixel AI';

        // Prioridad: SEO meta description > custom description
        const newDescription = customDescription || 
                              page.seo?.metaDesc || 
                              page.seo?.opengraphDescription || 
                              'AutomatizaciÃ³n Inteligente para tu Empresa';
        
        pageTitle = newTitle;
        pageDescription = newDescription;
      } else {
        debugInfo.error = 'Page not found';
      }
    } else {
      debugInfo.error = `Request failed: ${res.status}`;
    }
  } catch (error) {
    debugInfo.error = 'Connection error';
    // En caso de error, usar valores por defecto sin romper el build
  }
} else {
  debugInfo.error = 'GraphQL URL not configured';
}
---

<section class="hero">
  <!-- Canvas de partÃ­culas flotantes -->
  <canvas id="particles-canvas" class="particles-canvas"></canvas>
  
  <!-- Fondo radial gradient -->
  <div class="hero__background">
    <div class="gradient-orb gradient-orb--1"></div>
    <div class="gradient-orb gradient-orb--2"></div>
  </div>

  <!-- Contenido principal -->
  <div class="hero__container">
    <div class="hero__content">
      <!-- Badge -->
      <div class="hero__badge">
        <div class="badge-led"></div>
        <span>Inteligencia Artificial Empresarial</span>
      </div>

      <!-- TÃ­tulo principal -->
      <h1 class="hero__title">
        {pageTitle}
      </h1>

      <!-- DescripciÃ³n -->
      <p class="hero__description">
        {pageDescription}
      </p>

      <!-- CTAs -->
      <div class="hero__actions">
        <button class="cta-primary" id="cta-primary">
          <span>Automatiza tu Empresa</span>
          <div class="cta-glow"></div>
          <svg class="cta-arrow" width="20" height="20" viewBox="0 0 20 20" fill="none">
            <path d="M7.5 15L12.5 10L7.5 5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
        
        <button class="cta-secondary">
          <span>Ver Demo</span>
        </button>
      </div>

      <!-- Trust indicators minimalistas -->
      <div class="hero__trust">
        <div class="trust-metric">
          <span class="metric-number">+100</span>
          <span class="metric-label">Empresas</span>
        </div>
        <div class="trust-divider"></div>
        <div class="trust-metric">
          <span class="metric-number">99%</span>
          <span class="metric-label">SatisfacciÃ³n</span>
        </div>
        <div class="trust-divider"></div>
        <div class="trust-metric">
          <span class="metric-number">24/7</span>
          <span class="metric-label">Soporte</span>
        </div>
      </div>
    </div>

    <!-- Visual con imagen destacada o fallback -->
    <div class="hero__visual">
      {featuredImageUrl ? (
        <!-- Imagen destacada con efecto neon -->
        <div class="featured-image-container">
          <div class="neon-border">
            <div class="neon-runner"></div>
          </div>
          <div class="image-wrapper">
            <img 
              src="/images/hero-image.png" 
              alt="Blixel AI Automation"
              class="featured-image"
              loading="eager"
            />
            <div class="image-overlay"></div>
          </div>
        </div>
      ) : (
        <!-- Fallback: Grid visual minimalista -->
        <div class="visual-grid">
          <div class="grid-item" data-delay="0">
            <div class="item-icon">ðŸ¤–</div>
            <span>IA Avanzada</span>
          </div>
          <div class="grid-item" data-delay="200">
            <div class="item-icon">âš¡</div>
            <span>AutomatizaciÃ³n</span>
          </div>
          <div class="grid-item" data-delay="400">
            <div class="item-icon">ðŸ“Š</div>
            <span>Analytics</span>
          </div>
          <div class="grid-item" data-delay="600">
            <div class="item-icon">ðŸ”’</div>
            <span>Seguridad</span>
          </div>
        </div>
      )}
    </div>
  </div>

  <!-- Debug minimalista (solo visible en desarrollo) -->
  {import.meta.env.DEV && (
    <div class="debug-info">
      <div class="debug-status">
        <span class={`status-dot ${debugInfo.found ? 'success' : 'error'}`}></span>
        <span class="status-text">
          {debugInfo.found ? 'Connected' : 'Disconnected'}
        </span>
      </div>
      {debugInfo.hasImage && (
        <div class="debug-success">âœ… Featured image loaded</div>
      )}
      {debugInfo.error && (
        <div class="debug-error">Error: {debugInfo.error}</div>
      )}
    </div>
  )}

  <!-- Scroll indicator -->
  <div class="scroll-indicator">
    <div class="scroll-line"></div>
    <span class="scroll-text">Descubre mÃ¡s</span>
  </div>
</section>

<style>
  .hero {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    background: #0d0d0d;
    overflow: hidden;
  }

  /* Debug info minimalista y seguro */
  .debug-info {
    position: fixed;
    top: 100px;
    right: 20px;
    background: rgba(0, 0, 0, 0.9);
    color: white;
    padding: 0.75rem 1rem;
    border-radius: 8px;
    font-size: 0.75rem;
    z-index: 1000;
    border: 1px solid #333;
  }

  .debug-status {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #ef4444;
  }

  .status-dot.success {
    background: #22c55e;
  }

  .status-text {
    font-weight: 500;
  }

  .debug-success {
    margin-top: 0.5rem;
    color: #86efac;
    font-size: 0.65rem;
  }

  .debug-error {
    margin-top: 0.5rem;
    color: #fca5a5;
    font-size: 0.65rem;
  }

  /* Canvas de partÃ­culas */
  .particles-canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    opacity: 0.6;
  }

  /* Fondo con gradiente radial */
  .hero__background {
    position: absolute;
    inset: 0;
    pointer-events: none;
  }

  .gradient-orb {
    position: absolute;
    border-radius: 50%;
    filter: blur(100px);
    opacity: 0.3;
    will-change: transform;
  }

  .gradient-orb--1 {
    width: 400px;
    height: 400px;
    background: radial-gradient(circle, #60a5fa 0%, transparent 70%);
    top: 20%;
    right: 10%;
    animation: float-slow 8s ease-in-out infinite;
  }

  .gradient-orb--2 {
    width: 300px;
    height: 300px;
    background: radial-gradient(circle, #f97316 0%, transparent 70%);
    bottom: 20%;
    left: 10%;
    animation: float-slow 10s ease-in-out infinite reverse;
  }

  /* Container */
  .hero__container {
    position: relative;
    z-index: 10;
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
    display: grid;
    grid-template-columns: 1.2fr 0.8fr;
    gap: 6rem;
    align-items: center;
  }

  /* Contenido */
  .hero__content {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .hero__badge {
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1.5rem;
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 50px;
    color: #e5e5e5;
    font-size: 0.875rem;
    font-weight: 500;
    backdrop-filter: blur(8px);
    width: fit-content;
    animation: pulse-glow 3s ease-in-out infinite;
  }

  .badge-led {
    width: 8px;
    height: 8px;
    background: #22c55e;
    border-radius: 50%;
    animation: led-pulse 2s ease-in-out infinite;
    box-shadow: 0 0 10px rgba(34, 197, 94, 0.5);
  }

  .hero__title {
    font-family: 'Inter Tight', -apple-system, sans-serif;
    font-size: clamp(2.5rem, 6vw, 4.5rem);
    font-weight: 700;
    line-height: 1.1;
    color: #e5e5e5;
    margin: 0;
    letter-spacing: -0.02em;
  }

  .hero__description {
    font-family: 'Inter', -apple-system, sans-serif;
    font-size: 1.25rem;
    line-height: 1.65;
    color: #a3a3a3;
    margin: 0;
    max-width: 600px;
    font-weight: 400;
  }

  .hero__actions {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
  }

  /* CTA Primary con glow animado */
  .cta-primary {
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 2rem;
    background: #60a5fa;
    color: #0d0d0d;
    border: none;
    border-radius: 12px;
    font-weight: 600;
    font-size: 1rem;
    cursor: pointer;
    transition: all 200ms cubic-bezier(0.22, 0.61, 0.36, 1);
    overflow: hidden;
  }

  .cta-glow {
    position: absolute;
    inset: 0;
    border-radius: 12px;
    background: #60a5fa;
    opacity: 0;
    filter: blur(20px);
    animation: cta-glow-pulse 6s ease-in-out infinite;
    z-index: -1;
  }

  .cta-primary:hover {
    transform: translateY(-1px);
    box-shadow: 0 8px 25px rgba(96, 165, 250, 0.25);
  }

  .cta-primary:hover .cta-arrow {
    transform: translateX(4px);
  }

  .cta-arrow {
    transition: transform 200ms ease;
  }

  .cta-secondary {
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 2rem;
    background: transparent;
    color: #e5e5e5;
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 12px;
    font-weight: 500;
    font-size: 1rem;
    cursor: pointer;
    transition: all 200ms ease;
    backdrop-filter: blur(8px);
  }

  .cta-secondary:hover {
    border-color: rgba(255, 255, 255, 0.15);
    background: rgba(255, 255, 255, 0.05);
  }

  /* Trust indicators */
  .hero__trust {
    display: flex;
    align-items: center;
    gap: 2rem;
    margin-top: 2rem;
    opacity: 0.8;
  }

  .trust-metric {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .metric-number {
    font-family: 'Inter Tight', sans-serif;
    font-size: 1.5rem;
    font-weight: 600;
    color: #60a5fa;
    line-height: 1;
  }

  .metric-label {
    font-size: 0.875rem;
    color: #737373;
    font-weight: 400;
  }

  .trust-divider {
    width: 1px;
    height: 32px;
    background: rgba(255, 255, 255, 0.08);
  }

  /* Visual con imagen destacada */
  .hero__visual {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  /* Contenedor de imagen destacada con efecto neon */
  .featured-image-container {
    position: relative;
    max-width: 400px;
    width: 100%;
    aspect-ratio: 1;
    border-radius: 24px;
    overflow: hidden;
  }

  /* Borde neon animado */
  .neon-border {
    position: absolute;
    inset: -4px;
    border-radius: 28px;
    padding: 4px;
    background: linear-gradient(45deg, 
      #60a5fa 0%, 
      #f97316 25%, 
      #22c55e 50%, 
      #a855f7 75%, 
      #60a5fa 100%
    );
    background-size: 400% 400%;
    animation: neon-gradient 4s ease-in-out infinite;
    z-index: 1;
  }

  /* Runner que recorre el borde */
  .neon-runner {
    position: absolute;
    width: 100px;
    height: 100px;
    background: radial-gradient(circle, rgba(96, 165, 250, 0.8) 0%, transparent 70%);
    border-radius: 50%;
    filter: blur(15px);
    animation: neon-runner 3s linear infinite;
    z-index: 2;
  }

  /* Wrapper de la imagen */
  .image-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    border-radius: 24px;
    overflow: hidden;
    background: rgba(255, 255, 255, 0.03);
    backdrop-filter: blur(8px);
    z-index: 3;
  }

  /* Imagen destacada */
  .featured-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    border-radius: 24px;
    transition: transform 600ms ease;
  }

  .featured-image-container:hover .featured-image {
    transform: scale(1.05);
  }

  /* Overlay sutil */
  .image-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(
      135deg, 
      rgba(96, 165, 250, 0.1) 0%, 
      transparent 50%, 
      rgba(249, 115, 22, 0.1) 100%
    );
    border-radius: 24px;
    opacity: 0;
    transition: opacity 600ms ease;
  }

  .featured-image-container:hover .image-overlay {
    opacity: 1;
  }

  /* Grid visual fallback */
  .visual-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
    max-width: 300px;
  }

  .grid-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 24px;
    backdrop-filter: blur(8px);
    transition: all 400ms cubic-bezier(0.22, 0.61, 0.36, 1);
    opacity: 0;
    transform: translateY(20px);
    animation: reveal-up 600ms ease forwards;
  }

  .grid-item:hover {
    transform: translateY(-4px) scale(1.02);
    border-color: rgba(96, 165, 250, 0.2);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .item-icon {
    font-size: 1.5rem;
    opacity: 0.9;
  }

  .grid-item span {
    font-size: 0.875rem;
    color: #d4d4d4;
    font-weight: 500;
    text-align: center;
  }

  /* Scroll indicator */
  .scroll-indicator {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    opacity: 0.6;
  }

  .scroll-line {
    width: 1px;
    height: 40px;
    background: linear-gradient(to bottom, #60a5fa, transparent);
    animation: scroll-pulse 2s ease-in-out infinite;
  }

  .scroll-text {
    font-size: 0.75rem;
    color: #737373;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    writing-mode: vertical-lr;
  }

  /* Animaciones */
  @keyframes float-slow {
    0%, 100% { transform: translate(0, 0); }
    33% { transform: translate(20px, -20px); }
    66% { transform: translate(-20px, 20px); }
  }

  @keyframes pulse-glow {
    0%, 100% { box-shadow: 0 0 5px rgba(96, 165, 250, 0.1); }
    50% { box-shadow: 0 0 20px rgba(96, 165, 250, 0.2); }
  }

  @keyframes led-pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.4; }
  }

  @keyframes cta-glow-pulse {
    0%, 100% { opacity: 0; }
    50% { opacity: 0.2; }
  }

  @keyframes reveal-up {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes scroll-pulse {
    0%, 100% { opacity: 0.6; }
    50% { opacity: 1; }
  }

  /* Animaciones del efecto neon */
  @keyframes neon-gradient {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }

  @keyframes neon-runner {
    0% {
      top: -50px;
      left: -50px;
      transform: rotate(0deg);
    }
    25% {
      top: -50px;
      right: -50px;
      left: auto;
      transform: rotate(90deg);
    }
    50% {
      bottom: -50px;
      right: -50px;
      top: auto;
      left: auto;
      transform: rotate(180deg);
    }
    75% {
      bottom: -50px;
      left: -50px;
      right: auto;
      top: auto;
      transform: rotate(270deg);
    }
    100% {
      top: -50px;
      left: -50px;
      bottom: auto;
      right: auto;
      transform: rotate(360deg);
    }
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .hero__container {
      grid-template-columns: 1fr;
      gap: 3rem;
      text-align: center;
    }

    .featured-image-container,
    .visual-grid {
      margin: 0 auto;
    }

    .featured-image-container {
      max-width: 300px;
    }
  }

  @media (max-width: 768px) {
    .hero__container {
      padding: 0 1rem;
    }

    .hero__actions {
      flex-direction: column;
      align-items: center;
    }

    .cta-primary,
    .cta-secondary {
      width: 100%;
      max-width: 280px;
      justify-content: center;
    }

    .hero__trust {
      justify-content: center;
      gap: 1rem;
    }

    .trust-divider {
      display: none;
    }

    .featured-image-container {
      max-width: 250px;
    }

    .visual-grid {
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
      max-width: 250px;
    }

    .grid-item {
      padding: 1rem;
    }

    .debug-info {
      position: relative;
      top: auto;
      right: auto;
      margin-top: 2rem;
      max-width: 100%;
    }
  }

  @media (max-width: 480px) {
    .hero__title {
      font-size: 2rem;
    }

    .hero__description {
      font-size: 1rem;
    }

    .featured-image-container {
      max-width: 200px;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const canvas = document.getElementById('particles-canvas');
  if (!canvas) return;
  
  const ctx = canvas.getContext('2d');
  let particles = [];
  
  function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }
  
  resizeCanvas();
  window.addEventListener('resize', resizeCanvas);
  
  class Particle {
    constructor() {
      this.x = Math.random() * canvas.width;
      this.y = Math.random() * canvas.height;
      this.vx = (Math.random() - 0.5) * 0.5;
      this.vy = (Math.random() - 0.5) * 0.5;
      this.size = Math.random() * 2 + 1;
      this.opacity = Math.random() * 0.5 + 0.2;
    }
    
    update() {
      this.x += this.vx;
      this.y += this.vy;
      
      if (this.x < 0 || this.x > canvas.width) this.vx *= -1;
      if (this.y < 0 || this.y > canvas.height) this.vy *= -1;
      
      this.x = Math.max(0, Math.min(canvas.width, this.x));
      this.y = Math.max(0, Math.min(canvas.height, this.y));
    }
    
    draw() {
      ctx.save();
      ctx.globalAlpha = this.opacity;
      ctx.fillStyle = '#60a5fa';
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
      ctx.fill();
      ctx.restore();
    }
  }
  
  for (let i = 0; i < 30; i++) {
    particles.push(new Particle());
  }
  
  function animate() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    particles.forEach(particle => {
      particle.update();
      particle.draw();
    });
    
    requestAnimationFrame(animate);
  }
  
  animate();
  
  let ticking = false;
  
  function updateParallax() {
    const scrolled = window.pageYOffset;
    const parallax = scrolled * 0.5;
    
    const background = document.querySelector('.hero__background');
    if (background) {
      background.style.transform = `translateY(${parallax}px)`;
    }
    
    ticking = false;
  }
  
  function requestTick() {
    if (!ticking) {
      requestAnimationFrame(updateParallax);
      ticking = true;
    }
  }
  
  window.addEventListener('scroll', requestTick);
  
  const gridItems = document.querySelectorAll('.grid-item');
  gridItems.forEach((item, index) => {
    const delay = parseInt(item.dataset.delay) || 0;
    item.style.animationDelay = `${delay}ms`;
  });
});
</script>
