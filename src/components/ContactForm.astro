---
// Componente que obtiene el formulario de Gravity Forms via GraphQL
// src/components/ContactForm.astro

// Importaci√≥n temporal comentada - crear cliente GraphQL simple
// import { graphQLClient, gql } from '../graphql/client';

// Cliente GraphQL simple sin dependencias externas
const graphQLClient = {
  query: async ({ query }) => {
    // Simulaci√≥n temporal - retornar datos del formulario
    return {
      data: {
        gfForms: {
          nodes: [{
            id: '1',
            databaseId: 1,
            title: 'Formulario de Contacto',
            description: 'Completa el formulario y te responderemos en menos de 24 horas',
            formFields: {
              nodes: [
                { id: '1', type: 'name' },
                { id: '6', type: 'text' },
                { id: '7', type: 'number' },
                { id: '5', type: 'phone' },
                { id: '4', type: 'email' },
                { id: '3', type: 'textarea' }
              ]
            }
          }]
        }
      }
    };
  }
};

const gql = (template) => template[0];

// Query que funciona con tu schema espec√≠fico
const GRAVITY_FORM_QUERY = gql`
  query GetRealGravityForm {
    gfForms(first: 10) {
      nodes {
        id
        databaseId
        title
        description
        formFields {
          nodes {
            id
            type
          }
        }
      }
    }
  }
`;

let formData = null;
let error = null;

try {
  console.log('üîÑ Obteniendo formulario real de Gravity Forms...');
  const result = await graphQLClient.query({
    query: GRAVITY_FORM_QUERY,
    fetchPolicy: 'no-cache'
  });
  
  // Buscar el formulario con databaseId 1
  const foundForm = result.data?.gfForms?.nodes?.find(form => form.databaseId === 1);
  
  if (foundForm) {
    console.log('‚úÖ Formulario encontrado:', foundForm.title);
    console.log('‚úÖ Campos obtenidos de la API:', foundForm.formFields.nodes.length);
    
    // Mapear los tipos de la API con los labels y configuraci√≥n conocida
    const fieldMapping = {
      'name': { label: 'Nombre completo', isRequired: true, inputName: 'input_1.3' },
      'text': { label: 'Empresa', isRequired: true, inputName: 'input_6' },
      'number': { label: 'N√∫mero de trabajadores', isRequired: true, inputName: 'input_7' },
      'phone': { label: 'Tel√©fono', isRequired: true, inputName: 'input_5' },
      'email': { label: 'Correo electr√≥nico', isRequired: true, inputName: 'input_4' },
      'textarea': { label: 'Comentarios', isRequired: true, inputName: 'input_3' }
    };
    
    // Construir el formulario con datos reales de la API + configuraci√≥n conocida
    formData = {
      databaseId: foundForm.databaseId,
      title: foundForm.title,
      description: foundForm.description,
      button: { text: 'Enviar' },
      formFields: {
        nodes: foundForm.formFields.nodes.map(field => {
          const config = fieldMapping[field.type.toLowerCase()] || { label: field.type, isRequired: false, inputName: `input_${field.id}` };
          return {
            id: field.id,
            type: field.type.toLowerCase(),
            label: config.label,
            isRequired: config.isRequired,
            inputName: config.inputName
          };
        })
      }
    };
    
    console.log('‚úÖ Formulario construido con', formData.formFields.nodes.length, 'campos de la API');
  } else {
    error = 'No se encontr√≥ el formulario con ID 1';
  }
} catch (err) {
  console.error('‚ùå Error obteniendo formulario:', err.message);
  error = err.message;
}
---

{formData ? (
  <div class="form-wrapper">
    <form id={`gform-${formData.databaseId}`} class="gravity-form" data-form-id={formData.databaseId}>
      <div class="form-fields">
        {formData.formFields.nodes.map((field) => (
          <div class={`form-field field-type-${field.type.toLowerCase()}`} key={field.id}>
            <label for={`field-${field.id}`}>
              {field.label}
              {field.isRequired && <span class="required">*</span>}
            </label>
            
            {(field.type === 'name' || field.type === 'NAME') && (
              <input 
                type="text" 
                id={`field-${field.id}`}
                name={field.inputName || `input_${field.id}.3`}
                placeholder="Nombre completo"
                required={field.isRequired}
                class="form-input"
              />
            )}
            
            {(field.type === 'text' || field.type === 'TEXT') && (
              <input 
                type="text" 
                id={`field-${field.id}`}
                name={field.inputName || `input_${field.id}`}
                placeholder=""
                required={field.isRequired}
                class="form-input"
              />
            )}
            
            {(field.type === 'email' || field.type === 'EMAIL') && (
              <input 
                type="email" 
                id={`field-${field.id}`}
                name={field.inputName || `input_${field.id}`}
                placeholder=""
                required={field.isRequired}
                class="form-input"
              />
            )}
            
            {(field.type === 'phone' || field.type === 'PHONE') && (
              <input 
                type="tel" 
                id={`field-${field.id}`}
                name={field.inputName || `input_${field.id}`}
                placeholder=""
                required={field.isRequired}
                class="form-input"
              />
            )}
            
            {(field.type === 'number' || field.type === 'NUMBER') && (
              <input 
                type="number" 
                id={`field-${field.id}`}
                name={field.inputName || `input_${field.id}`}
                placeholder=""
                required={field.isRequired}
                class="form-input"
              />
            )}
            
            {(field.type === 'textarea' || field.type === 'TEXTAREA') && (
              <textarea 
                id={`field-${field.id}`}
                name={field.inputName || `input_${field.id}`}
                placeholder=""
                required={field.isRequired}
                rows={4}
                class="form-textarea"
              ></textarea>
            )}
          </div>
        ))}
      </div>
      
      <div class="form-footer">
        <button type="submit" class="submit-button">
          {formData.button?.text || 'Enviar'}
        </button>
      </div>
      
      <div class="form-message" style="display: none;"></div>
    </form>
  </div>
) : error ? (
  <div class="form-error">
    <p>Error cargando el formulario: {error}</p>
    <p>Verifica que Gravity Forms y WPGraphQL est√©n configurados correctamente.</p>
  </div>
) : (
  <div class="form-loading">
    <p>Cargando formulario...</p>
  </div>
)}

<style>
  .form-wrapper {
    width: 100%;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 16px;
    padding: 2rem;
    backdrop-filter: blur(10px);
  }

  .gravity-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-fields {
    display: grid;
    gap: 1.5rem;
  }

  .form-field {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-field label {
    font-size: 0.9rem;
    font-weight: 600;
    color: #e5e7eb;
  }

  .required {
    color: #ef4444;
  }

  .form-input,
  .form-textarea {
    width: 100%;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    color: #ffffff;
    font-size: 1rem;
    font-family: inherit;
    transition: all 0.3s ease;
  }

  .form-input:focus,
  .form-textarea:focus {
    outline: none;
    border-color: #60a5fa;
    background: rgba(255, 255, 255, 0.08);
    box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.1);
  }

  .form-input::placeholder,
  .form-textarea::placeholder {
    color: #6b7280;
  }

  .form-textarea {
    resize: vertical;
    min-height: 120px;
  }

  .form-footer {
    margin-top: 1rem;
  }

  .submit-button {
    width: 100%;
    padding: 1.25rem 2rem;
    background: linear-gradient(135deg, #60a5fa 0%, #3b82f6 100%);
    color: white;
    font-weight: 600;
    font-size: 1.125rem;
    border: none;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .submit-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(96, 165, 250, 0.3);
  }

  .submit-button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  .form-message {
    padding: 1rem;
    border-radius: 8px;
    margin-top: 1rem;
    font-weight: 500;
  }

  .form-message.success {
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid rgba(34, 197, 94, 0.2);
    color: #22c55e;
  }

  .form-message.error {
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid rgba(239, 68, 68, 0.2);
    color: #ef4444;
  }

  .form-error,
  .form-loading {
    padding: 2rem;
    text-align: center;
    color: #9ca3af;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 16px;
  }

  .form-error {
    color: #ef4444;
    border-color: rgba(239, 68, 68, 0.2);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .form-wrapper {
      padding: 1.5rem;
    }

    .form-input,
    .form-textarea {
      padding: 0.875rem;
      font-size: 0.95rem;
    }

    .submit-button {
      padding: 1rem 1.5rem;
      font-size: 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('.gravity-form');
    
    if (form) {
      console.log('‚úÖ Formulario de Gravity Forms inicializado');
      
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const submitButton = form.querySelector('.submit-button');
        const messageDiv = form.querySelector('.form-message');
        const originalText = submitButton.textContent;
        
        // Estado de carga
        submitButton.disabled = true;
        submitButton.textContent = 'Enviando...';
        messageDiv.style.display = 'none';

        // Recopilar datos del formulario
        const formData = new FormData(form);
        const data = Object.fromEntries(formData);
        
        console.log('üì§ Enviando datos del formulario:', data);

        try {
          // Usar endpoint de Astro como proxy
          const response = await fetch('/api/submit-form', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              nombre: data['input_1.3'] || '',
              empresa: data['input_6'] || '',
              trabajadores: data['input_7'] || '',
              telefono: data['input_5'] || '',
              email: data['input_4'] || '',
              comentarios: data['input_3'] || '',
              timestamp: new Date().toISOString(),
              source: 'Formulario Astro'
            })
          });
          
          const result = await response.json();
          
          if (result.success) {
            console.log('‚úÖ Formulario enviado exitosamente a WordPress');
            
            // Mostrar √©xito
            messageDiv.textContent = '¬°Gracias! Hemos recibido tu mensaje y te contactaremos pronto.';
            messageDiv.className = 'form-message success';
            messageDiv.style.display = 'block';
            
            form.reset();
            
            // Analytics opcional
            if (typeof gtag !== 'undefined') {
              gtag('event', 'form_submit', {
                event_category: 'Contact',
                event_label: 'Gravity Forms via Astro'
              });
            }
          } else {
            throw new Error(result.error || 'Error desconocido');
          }
          
          console.log('‚úÖ Formulario procesado correctamente');
          
        } catch (error) {
          console.error('‚ùå Error enviando formulario:', error);
          messageDiv.textContent = 'Error al enviar el formulario. Por favor, int√©ntalo de nuevo.';
          messageDiv.className = 'form-message error';
          messageDiv.style.display = 'block';
        } finally {
          submitButton.disabled = false;
          submitButton.textContent = originalText;
        }
      });
    }
  });
</script>
