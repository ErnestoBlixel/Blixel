---
// Componente que obtiene el formulario de Gravity Forms via GraphQL
// y env√≠a los datos a Make webhook

// Cliente GraphQL simple para obtener campos de WordPress
const graphQLClient = {
  query: async ({ query }) => {
    try {
      const response = await fetch('https://cms.blixel.es/graphql', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ query })
      });
      
      if (!response.ok) {
        throw new Error('Error obteniendo formulario de WordPress');
      }
      
      return await response.json();
    } catch (error) {
      console.error('Error GraphQL:', error);
      // Datos de respaldo si falla la conexi√≥n
      // Usar datos de respaldo si falla
      throw new Error('No se pudo conectar con WordPress');
    }
  }
};

const gql = (template) => template[0];

// Query para obtener el formulario de Gravity Forms
const GRAVITY_FORM_QUERY = gql`
  query GetGravityForm {
    gfForm(id: "1", idType: DATABASE_ID) {
      formFields {
        nodes {
          id
          type
          label
          isRequired
          placeholder
          ... on NameField {
            inputs {
              label
              placeholder
            }
          }
        }
      }
    }
  }
`;

let formData = null;
let error = null;

try {
  console.log('üîÑ Obteniendo formulario de WordPress...');
  const result = await graphQLClient.query({
    query: GRAVITY_FORM_QUERY
  });
  
  if (result.data?.gfForm?.formFields?.nodes) {
    formData = result.data.gfForm;
    console.log('‚úÖ Formulario obtenido:', formData.formFields.nodes.length, 'campos');
  } else {
    throw new Error('No se pudo obtener el formulario');
  }
} catch (err) {
  console.error('‚ùå Error obteniendo formulario:', err.message);
  // Usar formulario est√°tico como respaldo
  formData = {
    formFields: {
      nodes: [
        { id: '1', type: 'NAME', label: 'Nombre completo', isRequired: true },
        { id: '6', type: 'TEXT', label: 'Empresa', isRequired: true },
        { id: '7', type: 'NUMBER', label: 'N√∫mero de trabajadores', isRequired: true },
        { id: '5', type: 'PHONE', label: 'Tel√©fono', isRequired: true },
        { id: '4', type: 'EMAIL', label: 'Correo electr√≥nico', isRequired: true },
        { id: '3', type: 'TEXTAREA', label: 'Comentarios', isRequired: true }
      ]
    }
  };
  console.log('‚ö†Ô∏è Usando formulario est√°tico de respaldo');
}
---

{formData ? (
  <div class="form-wrapper">
    <form id="contact-form" class="gravity-form">
      <div class="form-fields">
        {formData.formFields.nodes.map((field) => (
          <div class={`form-field field-type-${field.type.toLowerCase()}`} key={field.id}>
            <label for={`field-${field.id}`}>
              {field.label}
              {field.isRequired && <span class="required">*</span>}
            </label>
            
            {(field.type === 'NAME') && (
              <input 
                type="text" 
                id={`field-${field.id}`}
                name="nombre"
                placeholder={field.placeholder || "Nombre completo"}
                required={field.isRequired}
                class="form-input"
              />
            )}
            
            {(field.type === 'TEXT') && (
              <input 
                type="text" 
                id={`field-${field.id}`}
                name={field.label.toLowerCase().includes('empresa') ? 'empresa' : `field_${field.id}`}
                placeholder={field.placeholder || ""}
                required={field.isRequired}
                class="form-input"
              />
            )}
            
            {(field.type === 'EMAIL') && (
              <input 
                type="email" 
                id={`field-${field.id}`}
                name="email"
                placeholder={field.placeholder || ""}
                required={field.isRequired}
                class="form-input"
              />
            )}
            
            {(field.type === 'PHONE') && (
              <input 
                type="tel" 
                id={`field-${field.id}`}
                name="telefono"
                placeholder={field.placeholder || ""}
                required={field.isRequired}
                class="form-input"
              />
            )}
            
            {(field.type === 'NUMBER') && (
              <input 
                type="number" 
                id={`field-${field.id}`}
                name="trabajadores"
                placeholder={field.placeholder || ""}
                required={field.isRequired}
                class="form-input"
              />
            )}
            
            {(field.type === 'TEXTAREA') && (
              <textarea 
                id={`field-${field.id}`}
                name="comentarios"
                placeholder={field.placeholder || "Por favor, haznos saber lo que tienes en mente."}
                required={field.isRequired}
                rows={4}
                class="form-textarea"
              ></textarea>
            )}
          </div>
        ))}
      </div>
      
      <div class="form-footer">
        <button type="submit" class="submit-button">
          Enviar
        </button>
      </div>
      
      <div class="form-message" style="display: none;"></div>
    </form>
  </div>
) : error ? (
  <div class="form-error">
    <p>Error cargando el formulario: {error}</p>
    <p>Por favor, recarga la p√°gina o int√©ntalo m√°s tarde.</p>
  </div>
) : (
  <div class="form-loading">
    <p>Cargando formulario...</p>
  </div>
)}

<style>
  .form-wrapper {
    width: 100%;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 16px;
    padding: 2rem;
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
  }

  html:not(.dark) .form-wrapper {
    background: rgba(0, 0, 0, 0.04);
    border: 1px solid rgba(0, 0, 0, 0.12);
  }

  .gravity-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-fields {
    display: grid;
    gap: 1.5rem;
  }

  .form-field {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-field label {
    font-size: 0.9rem;
    font-weight: 600;
    color: #e5e7eb;
    transition: color 0.3s ease;
  }

  html:not(.dark) .form-field label {
    color: #374151;
  }

  .required {
    color: #ef4444;
  }

  .form-input,
  .form-textarea {
    width: 100%;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    color: #ffffff;
    font-size: 1rem;
    font-family: inherit;
    transition: all 0.3s ease;
  }

  html:not(.dark) .form-input,
  html:not(.dark) .form-textarea {
    background: rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(0, 0, 0, 0.15);
    color: #111827;
  }

  .form-input:focus,
  .form-textarea:focus {
    outline: none;
    border-color: #60a5fa;
    background: rgba(255, 255, 255, 0.08);
    box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.1);
  }

  html:not(.dark) .form-input:focus,
  html:not(.dark) .form-textarea:focus {
    background: rgba(0, 0, 0, 0.08);
    border-color: #3b82f6;
  }

  .form-input::placeholder,
  .form-textarea::placeholder {
    color: #6b7280;
    transition: color 0.3s ease;
  }

  html:not(.dark) .form-input::placeholder,
  html:not(.dark) .form-textarea::placeholder {
    color: #9ca3af;
  }

  .form-textarea {
    resize: vertical;
    min-height: 120px;
  }

  .form-footer {
    margin-top: 1rem;
  }

  .submit-button {
    width: 100%;
    padding: 1.25rem 2rem;
    background: linear-gradient(135deg, #60a5fa 0%, #3b82f6 100%);
    color: white;
    font-weight: 600;
    font-size: 1.125rem;
    border: none;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .submit-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(96, 165, 250, 0.3);
  }

  .submit-button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  .form-message {
    padding: 1rem;
    border-radius: 8px;
    margin-top: 1rem;
    font-weight: 500;
  }

  .form-message.success {
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid rgba(34, 197, 94, 0.2);
    color: #22c55e;
  }

  .form-message.error {
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid rgba(239, 68, 68, 0.2);
    color: #ef4444;
  }

  .form-error,
  .form-loading {
    padding: 2rem;
    text-align: center;
    color: #9ca3af;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 16px;
  }

  .form-error {
    color: #ef4444;
    border-color: rgba(239, 68, 68, 0.2);
  }

  @media (max-width: 768px) {
    .form-wrapper {
      padding: 1.5rem;
    }

    .form-input,
    .form-textarea {
      padding: 0.875rem;
      font-size: 0.95rem;
    }

    .submit-button {
      padding: 1rem 1.5rem;
      font-size: 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contact-form') as HTMLFormElement;
    
    if (form) {
      console.log('‚úÖ Formulario inicializado');
      
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const submitButton = form.querySelector('.submit-button') as HTMLButtonElement;
        const messageDiv = form.querySelector('.form-message') as HTMLDivElement;
        const originalText = submitButton.textContent;
        
        // Estado de carga
        submitButton.disabled = true;
        submitButton.textContent = 'Enviando...';
        messageDiv.style.display = 'none';

        // Recopilar datos del formulario
        const formData = new FormData(form);
        const data = {
          nombre: formData.get('nombre'),
          empresa: formData.get('empresa'),
          trabajadores: formData.get('trabajadores'),
          telefono: formData.get('telefono'),
          email: formData.get('email'),
          comentarios: formData.get('comentarios')
        };
        
        console.log('üì§ Datos del formulario:', data);

        try {
          // Enviar directamente a Make webhook
          const response = await fetch('https://hook.eu2.make.com/jp4xovo57gnom3guy1urlqnz1h8h3t3m', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              ...data,
              fecha: new Date().toISOString(),
              origen: 'blixel.es'
            })
          });
          
          // Make responde con texto "Accepted", no JSON
          if (response.ok) {
            console.log('‚úÖ Make respondi√≥: Accepted');
            // Mostrar mensaje de √©xito
            messageDiv.textContent = '¬°Gracias! Hemos recibido tu mensaje y te contactaremos pronto.';
            messageDiv.className = 'form-message success';
            messageDiv.style.display = 'block';
            form.reset();
          } else {
            throw new Error('Error al enviar el formulario');
          }
          
        } catch (error) {
          console.error('‚ùå Error:', error);
          messageDiv.textContent = 'Error al enviar el formulario. Por favor, int√©ntalo de nuevo.';
          messageDiv.className = 'form-message error';
          messageDiv.style.display = 'block';
        } finally {
          submitButton.disabled = false;
          submitButton.textContent = originalText;
        }
      });
    }
  });
</script>
