---
// ContactForm multiidioma con elementos en español mantenidos
// Props para personalización de idioma
export interface Props {
  currentLang?: string;
  lang?: string;
  namePlaceholder?: string;
  emailPlaceholder?: string;
  companyPlaceholder?: string;
  messagePlaceholder?: string;
  submitText?: string;
  successMessage?: string;
  errorMessage?: string;
}

const {
  currentLang = 'es',
  lang = 'es',
  namePlaceholder,
  emailPlaceholder,
  companyPlaceholder,
  messagePlaceholder,
  submitText,
  successMessage,
  errorMessage,
} = Astro.props;

// Detectar idioma actual de la prop o URL
const detectedLang = currentLang || lang || 'es';

// Textos por defecto dependiendo del idioma detectado
const defaultTexts = {
  es: {
    namePlaceholder: "Nombre completo",
    emailPlaceholder: "Correo electrónico",
    companyPlaceholder: "Empresa",
    phonePlaceholder: "Teléfono",
    workersPlaceholder: "Número de trabajadores",
    messagePlaceholder: "Por favor, haznos saber lo que tienes en mente.",
    submitText: "Enviar",
    successMessage: "¡Gracias! Hemos recibido tu mensaje y te contactaremos pronto.",
    errorMessage: "Error al enviar el formulario. Por favor, inténtalo de nuevo."
  },
  ca: {
    namePlaceholder: "Nom complet",
    emailPlaceholder: "Correu electrònic",
    companyPlaceholder: "Empresa",
    phonePlaceholder: "Telèfon",
    workersPlaceholder: "Nombre de treballadors",
    messagePlaceholder: "Si us plau, fes-nos saber què tens en ment.",
    submitText: "Enviar",
    successMessage: "Gràcies! Hem rebut el teu missatge i et contactarem aviat.",
    errorMessage: "Error en enviar el formulari. Si us plau, torna-ho a provar."
  }
};

// Obtener textos según el idioma
const texts = defaultTexts[detectedLang] || defaultTexts.es;

// Usar props personalizados si están disponibles, sino usar los por defecto
const finalTexts = {
  namePlaceholder: namePlaceholder || texts.namePlaceholder,
  emailPlaceholder: emailPlaceholder || texts.emailPlaceholder,
  companyPlaceholder: companyPlaceholder || texts.companyPlaceholder,
  phonePlaceholder: texts.phonePlaceholder,
  workersPlaceholder: texts.workersPlaceholder,
  messagePlaceholder: messagePlaceholder || texts.messagePlaceholder,
  submitText: submitText || texts.submitText,
  successMessage: successMessage || texts.successMessage,
  errorMessage: errorMessage || texts.errorMessage,
};

// Campos del formulario (manteniendo estructura original para compatibilidad)
const formFields = [
  { id: '1', type: 'NAME', label: 'Nombre completo', isRequired: true },
  { id: '6', type: 'TEXT', label: 'Empresa', isRequired: true },
  { id: '7', type: 'NUMBER', label: 'Número de trabajadores', isRequired: true },
  { id: '5', type: 'PHONE', label: 'Teléfono', isRequired: true },
  { id: '4', type: 'EMAIL', label: 'Correo electrónico', isRequired: true },
  { id: '3', type: 'TEXTAREA', label: 'Comentarios', isRequired: true }
];
---

<div class="form-wrapper">
  <form id="contact-form" class="gravity-form" data-lang={detectedLang}>
    <div class="form-fields">
      {formFields.map((field) => (
        <div class={`form-field field-type-${field.type.toLowerCase()}`} key={field.id}>
          <label for={`field-${field.id}`}>
            {field.label}
            {field.isRequired && <span class="required">*</span>}
          </label>
          
          {(field.type === 'NAME') && (
            <input 
              type="text" 
              id={`field-${field.id}`}
              name="nombre"
              placeholder={finalTexts.namePlaceholder}
              required={field.isRequired}
              class="form-input"
            />
          )}
          
          {(field.type === 'TEXT') && (
            <input 
              type="text" 
              id={`field-${field.id}`}
              name={field.label.toLowerCase().includes('empresa') ? 'empresa' : `field_${field.id}`}
              placeholder={finalTexts.companyPlaceholder}
              required={field.isRequired}
              class="form-input"
            />
          )}
          
          {(field.type === 'EMAIL') && (
            <input 
              type="email" 
              id={`field-${field.id}`}
              name="email"
              placeholder={finalTexts.emailPlaceholder}
              required={field.isRequired}
              class="form-input"
            />
          )}
          
          {(field.type === 'PHONE') && (
            <input 
              type="tel" 
              id={`field-${field.id}`}
              name="telefono"
              placeholder={finalTexts.phonePlaceholder}
              required={field.isRequired}
              class="form-input"
            />
          )}
          
          {(field.type === 'NUMBER') && (
            <input 
              type="number" 
              id={`field-${field.id}`}
              name="trabajadores"
              placeholder={finalTexts.workersPlaceholder}
              required={field.isRequired}
              class="form-input"
              min="1"
              max="10000"
            />
          )}
          
          {(field.type === 'TEXTAREA') && (
            <textarea 
              id={`field-${field.id}`}
              name="comentarios"
              placeholder={finalTexts.messagePlaceholder}
              required={field.isRequired}
              rows={4}
              class="form-textarea"
            ></textarea>
          )}
        </div>
      ))}
    </div>
    
    <div class="form-footer">
      <button type="submit" class="submit-button">
        {finalTexts.submitText}
      </button>
    </div>
    
    <div class="form-message" style="display: none;"></div>
  </form>
</div>

<style>
  .form-wrapper {
    width: 100%;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 16px;
    padding: 2rem;
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
  }

  html:not(.dark) .form-wrapper {
    background: rgba(0, 0, 0, 0.04);
    border: 1px solid rgba(0, 0, 0, 0.12);
  }

  .gravity-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-fields {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
  }

  /* El textarea ocupará toda la fila */
  .field-type-textarea {
    grid-column: 1 / -1;
  }

  .form-field {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-field label {
    font-size: 0.9rem;
    font-weight: 600;
    color: #e5e7eb;
    transition: color 0.3s ease;
  }

  html:not(.dark) .form-field label {
    color: #374151;
  }

  .required {
    color: #ef4444;
  }

  .form-input,
  .form-textarea {
    width: 100%;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    color: #ffffff;
    font-size: 1rem;
    font-family: inherit;
    transition: all 0.3s ease;
  }

  html:not(.dark) .form-input,
  html:not(.dark) .form-textarea {
    background: rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(0, 0, 0, 0.15);
    color: #111827;
  }

  .form-input:focus,
  .form-textarea:focus {
    outline: none;
    border-color: #60a5fa;
    background: rgba(255, 255, 255, 0.08);
    box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.1);
  }

  html:not(.dark) .form-input:focus,
  html:not(.dark) .form-textarea:focus {
    background: rgba(0, 0, 0, 0.08);
    border-color: #3b82f6;
  }

  .form-input::placeholder,
  .form-textarea::placeholder {
    color: #6b7280;
    transition: color 0.3s ease;
  }

  html:not(.dark) .form-input::placeholder,
  html:not(.dark) .form-textarea::placeholder {
    color: #9ca3af;
  }

  .form-textarea {
    resize: vertical;
    min-height: 120px;
  }

  .form-footer {
    margin-top: 1rem;
  }

  .submit-button {
    width: 100%;
    padding: 1.25rem 2rem;
    background: linear-gradient(135deg, #60a5fa 0%, #3b82f6 100%);
    color: white;
    font-weight: 600;
    font-size: 1.125rem;
    border: none;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .submit-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(96, 165, 250, 0.3);
  }

  .submit-button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  .form-message {
    padding: 1rem;
    border-radius: 8px;
    margin-top: 1rem;
    font-weight: 500;
  }

  .form-message.success {
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid rgba(34, 197, 94, 0.2);
    color: #22c55e;
  }

  .form-message.error {
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid rgba(239, 68, 68, 0.2);
    color: #ef4444;
  }

  @media (max-width: 768px) {
    .form-wrapper {
      padding: 1.5rem;
    }

    .form-fields {
      grid-template-columns: 1fr;
      gap: 1.25rem;
    }

    .field-type-textarea {
      grid-column: 1;
    }

    .form-input,
    .form-textarea {
      padding: 0.875rem;
      font-size: 0.95rem;
    }

    .submit-button {
      padding: 1rem 1.5rem;
      font-size: 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contact-form') as HTMLFormElement;
    
    if (form) {
      console.log('✅ Formulario multiidioma inicializado');
      
      // Obtener idioma del formulario
      const formLang = form.getAttribute('data-lang') || 'es';
      
      // Textos para mensajes (manteniendo algunos en español por compatibilidad)
      const messageTexts = {
        es: {
          sending: 'Enviando...',
          success: '¡Gracias! Hemos recibido tu mensaje y te contactaremos pronto.',
          error: 'Error al enviar el formulario. Por favor, inténtalo de nuevo.'
        },
        ca: {
          sending: 'Enviant...',
          success: 'Gràcies! Hem rebut el teu missatge i et contactarem aviat.',
          error: 'Error en enviar el formulari. Si us plau, torna-ho a provar.'
        }
      };
      
      const texts = messageTexts[formLang] || messageTexts.es;
      
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const submitButton = form.querySelector('.submit-button') as HTMLButtonElement;
        const messageDiv = form.querySelector('.form-message') as HTMLDivElement;
        const originalText = submitButton.textContent;
        
        // Estado de carga
        submitButton.disabled = true;
        submitButton.textContent = texts.sending;
        messageDiv.style.display = 'none';

        // Recopilar datos del formulario
        const formData = new FormData(form);
        const data = {
          nombre: formData.get('nombre'),
          empresa: formData.get('empresa'),
          trabajadores: formData.get('trabajadores'),
          telefono: formData.get('telefono'),
          email: formData.get('email'),
          comentarios: formData.get('comentarios'),
          idioma: formLang // Añadir idioma del formulario
        };
        
        console.log('📤 Datos del formulario (' + formLang + '):', data);

        try {
          // Enviar directamente a Make webhook (manteniendo endpoint original)
          const response = await fetch('https://hook.eu2.make.com/jp4xovo57gnom3guy1urlqnz1h8h3t3m', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              ...data,
              fecha: new Date().toISOString(),
              origen: 'blixel.es',
              idioma_formulario: formLang
            })
          });
          
          // Make responde con texto "Accepted", no JSON
          if (response.ok) {
            console.log('✅ Make respondió: Accepted (' + formLang + ')');
            // Mostrar mensaje de éxito
            messageDiv.textContent = texts.success;
            messageDiv.className = 'form-message success';
            messageDiv.style.display = 'block';
            form.reset();
          } else {
            throw new Error('Error al enviar el formulario');
          }
          
        } catch (error) {
          console.error('❌ Error:', error);
          messageDiv.textContent = texts.error;
          messageDiv.className = 'form-message error';
          messageDiv.style.display = 'block';
        } finally {
          submitButton.disabled = false;
          submitButton.textContent = originalText;
        }
      });
    }
  });
</script>