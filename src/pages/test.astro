---
import Layout from '../layouts/Layout.astro';

// Query alternativo: obtener todas las páginas y usar la primera o buscar por título
const GQL = `
  query GetPages {
    pages(first: 10) {
      nodes {
        title
        content
        slug
        isFrontPage
      }
    }
  }
`;

// 2) Haz el fetch usando la variable de entorno
const graphqlUrl = import.meta.env.PUBLIC_WP_GRAPHQL_URL;
if (!graphqlUrl) {
  throw new Error('PUBLIC_WP_GRAPHQL_URL no está configurada');
}

const res = await fetch(graphqlUrl, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ query: GQL })
});

if (!res.ok) throw new Error(`Error GraphQL: ${res.status}`);

const result = await res.json();
console.log('GraphQL Response:', result);

// Verificar si hay errores en la respuesta
if (result.errors) {
  console.error('GraphQL Errors:', result.errors);
  throw new Error(`GraphQL Error: ${result.errors[0].message}`);
}

// Verificar si tenemos data
if (!result.data || !result.data.pages) {
  throw new Error('No pages found');
}

// 3) Buscar la página de inicio o usar la primera
const pages = result.data.pages.nodes;
const home = pages.find(page => page.isFrontPage) || pages[0];

// Si no existe, usar datos por defecto
const pageData = home || {
  title: "Blixel AI - Automatización Inteligente",
  content: "<p>Transformamos tu empresa con Inteligencia Artificial y automatización avanzada.</p>"
};
---

<!-- 4) Ahora ya en el template puedes renderizar -->
<Layout>
  <h1>{pageData.title}</h1>
  <div innerHTML={pageData.content} />
</Layout>
